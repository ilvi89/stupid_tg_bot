#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ DSL Telegram-–±–æ—Ç–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ .env
"""

import os
import sys
import argparse
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='DSL Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run.py                    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
  python run.py --check            # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  python run.py --env custom.env   # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π .env —Ñ–∞–π–ª
  python run.py --debug            # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
  python run.py --scenarios-only   # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  python run.py --token TOKEN      # –ü–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
        """
    )
    
    parser.add_argument('--check', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--env', type=str, default='.env',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    parser.add_argument('--debug', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('--scenarios-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏')
    parser.add_argument('--token', type=str,
                       help='–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    parser.add_argument('--password', type=str,
                       help='–ü–∞—Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    parser.add_argument('--db', type=str,
                       help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    
    return parser.parse_args()


def load_environment(env_file: str, args):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ {env_file}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.token:
        os.environ['BOT_TOKEN'] = args.token
        print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
    
    if args.password:
        os.environ['MANAGER_PASSWORD'] = args.password
        print("‚úÖ –ü–∞—Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
    
    if args.db:
        os.environ['DATABASE_PATH'] = args.db
        print(f"‚úÖ –ü—É—Ç—å –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {args.db}")
    
    if args.debug:
        os.environ['LOG_LEVEL'] = 'DEBUG'
        os.environ['DSL_DEBUG_MODE'] = 'True'
        print("‚úÖ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_level = os.getenv('LOG_LEVEL', 'INFO')
    log_file = os.getenv('LOG_FILE')
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging_config = {
        'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        'level': getattr(logging, log_level.upper()),
        'handlers': []
    }
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(logging_config['format']))
    logging_config['handlers'].append(console_handler)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if log_file:
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(logging_config['format']))
        logging_config['handlers'].append(file_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging_config['level'],
        format=logging_config['format'],
        handlers=logging_config['handlers'],
        force=True
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.INFO)


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import telegram
        import dotenv
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
        return False


def check_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    token = os.getenv('BOT_TOKEN')
    if not token or token == 'your_bot_token_here':
        print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª–µ: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        print("3. –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: python run.py --token –≤–∞—à_—Ç–æ–∫–µ–Ω")
        return False
    
    print(f"‚úÖ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {token[:10]}...")
    return True


def check_manager_password():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    password = os.getenv('MANAGER_PASSWORD')
    if not password or password == 'your_secure_manager_password_here':
        print("‚ö†Ô∏è MANAGER_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ .env —Ñ–∞–π–ª–µ")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    
    print("‚úÖ –ü–∞—Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return True


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = os.getenv('DATABASE_PATH', 'english_club.db')
    
    try:
        import sqlite3
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        conn = sqlite3.connect(db_path)
        conn.close()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞: {db_path}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("–ë–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


def check_scenarios():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    scenarios_dir = Path("scenarios")
    
    if not scenarios_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è scenarios –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    required_files = [
        "scenarios/__init__.py",
        "scenarios/registry.py",
        "scenarios/user/registration.py",
        "scenarios/manager/auth.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {missing_files}")
        return False
    
    print("‚úÖ –§–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞–π–¥–µ–Ω—ã")
    return True


def check_documents():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    documents_dir = Path("documents")
    
    if not documents_dir.exists():
        print("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è documents –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    snaop_path = os.getenv('SNAOP_DOCUMENT_PATH', 'documents/–°–Ω–∞–û–ü —Å –ø—Ä–æ—á–µ—Ä–∫–∞–º–∏.pdf')
    consent_path = os.getenv('NEWSLETTER_CONSENT_PATH', 'documents/–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_—Ä–∞—Å—Å—ã–ª–∫—É_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö_–∏_—Ä–µ–∫–ª–∞–º–Ω—ã—Ö_—Å–æ–æ–±—â–µ–Ω–∏–π_—Å_–ø—Ä–æ—á–µ—Ä–∫–∞–º–∏.pdf')
    
    if os.path.exists(snaop_path):
        print(f"‚úÖ –°–ù–ê–û–ü –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"‚ö†Ô∏è –°–ù–ê–û–ü –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {snaop_path}")
    
    if os.path.exists(consent_path):
        print(f"‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print(f"‚ö†Ô∏è –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {consent_path}")
    
    return True


def test_dsl_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DSL —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DSL —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—É—é —Å–±–æ—Ä–∫—É —Ü–µ–ø–æ—á–∫–∏
        from dialog_dsl import DialogBuilder
        
        chain = (DialogBuilder('test_scenario', '–¢–µ—Å—Ç')
                 .start_with('start')
                 .add_final('start', '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
                 .build())
        
        if chain and chain.name == '–¢–µ—Å—Ç':
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ DSL —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DSL —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def show_scenarios_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"""
    try:
        from scenarios.auto_register import ScenarioDiscovery
        
        print("\nüìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        stats = ScenarioDiscovery.discover_and_register_all()
        
        if "error" in stats:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {stats['error']}")
            return False
        
        from scenarios.registry import get_registry
        registry = get_registry()
        registry_stats = registry.get_statistics()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {registry_stats['total_scenarios']}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {registry_stats['enabled_scenarios']}")
        print(f"‚Ä¢ –¢–æ—á–µ–∫ –≤—Ö–æ–¥–∞: {registry_stats['entry_points']}")
        
        print(f"\nüìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in registry_stats['categories'].items():
            if count > 0:
                print(f"‚Ä¢ {category}: {count}")
        
        print(f"\nüë§ –ü–æ —Ç–∏–ø–∞–º:")
        for type_name, count in registry_stats['types'].items():
            if count > 0:
                print(f"‚Ä¢ {type_name}: {count}")
        
        if registry_stats['missing_dependencies']:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:")
            for scenario_id, missing in registry_stats['missing_dependencies'].items():
                print(f"‚Ä¢ {scenario_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {', '.join(missing)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö: {e}")
        return False


def run_system_checks():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DSL —Å–∏—Å—Ç–µ–º—ã...\n")
    
    checks = [
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", check_requirements),
        ("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", check_token),
        ("–ü–∞—Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", check_manager_password),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("–§–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", check_scenarios),
        ("–î–æ–∫—É–º–µ–Ω—Ç—ã", check_documents),
        ("DSL —Å–∏—Å—Ç–µ–º–∞", test_dsl_system)
    ]
    
    all_passed = True
    critical_failed = False
    
    for check_name, check_func in checks:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {check_name}")
        result = check_func()
        if not result:
            all_passed = False
            # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if check_name in ["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", "–¢–æ–∫–µ–Ω –±–æ—Ç–∞", "–§–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", "DSL —Å–∏—Å—Ç–µ–º–∞"]:
                critical_failed = True
        print()
    
    return all_passed, critical_failed


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    print("ü§ñ DSL Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    load_environment(args.env, args)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = logging.getLogger(__name__)
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    if args.scenarios_only:
        print("\nüé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        if show_scenarios_info():
            print("\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏")
            sys.exit(1)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É
    all_passed, critical_failed = run_system_checks()
    
    if critical_failed:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        sys.exit(1)
    
    if not all_passed:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if args.check:
        print("\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python run.py")
        return
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DSL –±–æ—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
        from bot import DSLTelegramBot
        
        bot = DSLTelegramBot()
        bot.run()
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ main –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π


if __name__ == '__main__':
    main()