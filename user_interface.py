#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import sqlite3
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from dialog_config import DIALOG_TEXTS, BUTTONS, SETTINGS

class UserInterface:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
    
    async def show_user_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton(BUTTONS['user_menu']['profile'], callback_data="user_profile")],
            [InlineKeyboardButton(BUTTONS['user_menu']['help'], callback_data="user_help")],
            [InlineKeyboardButton(BUTTONS['user_menu']['settings'], callback_data="user_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        menu_text = (
            "üá¨üáß <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.message:
            await update.message.reply_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_user_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_data = self._get_user_data(user_id)
        
        if not user_data:
            await query.edit_message_text(
                "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞!",
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        newsletter_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if user_data['newsletter_consent'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>–ò–º—è:</b> {user_data['name']}\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_data['age']} –ª–µ—Ç\n"
            f"<b>–û–ø—ã—Ç –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:</b> {user_data['english_experience']}\n"
            f"<b>–†–∞—Å—Å—ã–ª–∫–∞:</b> {newsletter_status}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data['registration_date']}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –î–Ω–µ–π –≤ –∫–ª—É–±–µ: {self._calculate_days_in_club(user_data['registration_date'])}\n"
            f"‚Ä¢ Telegram ID: {user_data['telegram_id']}"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="user_edit_profile")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(profile_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_user_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        help_text = DIALOG_TEXTS['help']['user_commands']
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="user_support")],
            [InlineKeyboardButton("üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="user_materials")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_user_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_data = self._get_user_data(user_id)
        
        if not user_data:
            await query.edit_message_text(
                "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ /start",
                parse_mode='HTML'
            )
            return
        
        newsletter_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if user_data['newsletter_consent'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        newsletter_action = "–û—Ç–∫–ª—é—á–∏—Ç—å" if user_data['newsletter_consent'] else "–í–∫–ª—é—á–∏—Ç—å"
        
        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞: {newsletter_text}\n"
            f"‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –†—É—Å—Å–∫–∏–π\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        keyboard = [
            [InlineKeyboardButton(f"üìß {newsletter_action} —Ä–∞—Å—Å—ã–ª–∫—É", 
                                callback_data=f"user_toggle_newsletter_{not user_data['newsletter_consent']}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="user_delete_confirm")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(settings_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def toggle_newsletter(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
        query = update.callback_query
        await query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        new_value = query.data.split('_')[-1] == 'True'
        user_id = query.from_user.id
        
        success = self._update_newsletter_consent(user_id, new_value)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
            await query.edit_message_text(
                f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"–†–∞—Å—Å—ã–ª–∫–∞ {status_text}.",
                parse_mode='HTML'
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            await asyncio.sleep(2)
            await self.show_user_settings(update, context)
        else:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
    
    async def confirm_delete_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        confirm_text = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b> —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
            "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è –≤ –∫–ª—É–±–µ\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="user_delete_confirmed")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(confirm_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def delete_user_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        success = self._delete_user_data(user_id)
        
        if success:
            await query.edit_message_text(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–ª—É–±–µ!\n\n"
                "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )
    
    async def show_support_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        query = update.callback_query
        await query.answer()
        
        support_text = (
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
            "1. –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin_username\n"
            "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å email: support@englishclub.com\n"
            "3. –ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (XXX) XXX-XX-XX\n\n"
            "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
            "–ü–Ω-–ü—Ç: 9:00 - 18:00\n"
            "–°–±-–í—Å: 10:00 - 16:00\n\n"
            "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="user_write_support")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data="user_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(support_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_materials(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
        query = update.callback_query
        await query.answer()
        
        materials_text = (
            "üìö <b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
            "üéØ <b>–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:</b>\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞\n"
            "‚Ä¢ –ü–µ—Ä–≤—ã–µ 1000 —Å–ª–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏\n\n"
            "üìà <b>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
            "‚Ä¢ –î–µ–ª–æ–≤–∞—è –ª–µ–∫—Å–∏–∫–∞\n"
            "‚Ä¢ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "üèÜ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
            "‚Ä¢ –ò–¥–∏–æ–º—ã –∏ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º—ã\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
            "‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n\n"
            "üì± <b>–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ Duolingo\n"
            "‚Ä¢ Anki –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            "‚Ä¢ BBC Learning English"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìñ –°–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="user_download_materials")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã –∏ —Ç–µ—Å—Ç—ã", callback_data="user_games")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data="user_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(materials_text, parse_mode='HTML', reply_markup=reply_markup)
    
    def _get_user_data(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT telegram_id, username, name, age, english_experience, 
                       data_consent, newsletter_consent, registration_date
                FROM users WHERE telegram_id = ?
            ''', (user_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'telegram_id': result[0],
                    'username': result[1],
                    'name': result[2],
                    'age': result[3],
                    'english_experience': result[4],
                    'data_consent': bool(result[5]),
                    'newsletter_consent': bool(result[6]),
                    'registration_date': result[7]
                }
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def _update_newsletter_consent(self, user_id: int, consent: bool) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE users SET newsletter_consent = ? WHERE telegram_id = ?
            ''', (consent, user_id))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {e}")
            return False
    
    def _delete_user_data(self, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM users WHERE telegram_id = ?', (user_id,))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def _calculate_days_in_club(self, registration_date: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–ª—É–±–µ"""
        try:
            reg_date = datetime.strptime(registration_date.split()[0], '%Y-%m-%d')
            today = datetime.now()
            return (today - reg_date).days
        except:
            return 0