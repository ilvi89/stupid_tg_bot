#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞ - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ DSL
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
"""

import logging
import os
import asyncio
from typing import Dict, Any

from telegram.ext import Application, ContextTypes
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç DSL —Å–∏—Å—Ç–µ–º—ã
from dsl_bootstrap import DSLBootstrap
from scenarios.executor import get_executor, get_integrator
from dsl_interfaces import get_user_interface, get_manager_interface, get_system_interface


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = os.getenv('LOG_LEVEL', 'INFO')
log_file = os.getenv('LOG_FILE')

logging_config = {
    'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    'level': getattr(logging, log_level.upper())
}

if log_file:
    logging_config['filename'] = log_file

logging.basicConfig(**logging_config)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
DATABASE_PATH = os.getenv('DATABASE_PATH', 'english_club.db')


class DSLTelegramBot:
    """Telegram-–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ DSL —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.db_path = DATABASE_PATH
        self.application = None
        self.bootstrap = DSLBootstrap(self.db_path)
        self.init_completed = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        import sqlite3
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                name TEXT NOT NULL,
                age INTEGER,
                english_experience TEXT,
                data_consent BOOLEAN DEFAULT 0,
                newsletter_consent BOOLEAN DEFAULT 0,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def _initialize_dsl_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DSL —Å–∏—Å—Ç–µ–º—ã"""
        if self.init_completed:
            return True
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DSL —Å–∏—Å—Ç–µ–º—ã...")
        result = await self.bootstrap.initialize()
        
        if result["success"]:
            self.init_completed = True
            logger.info("DSL —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
            report = self.bootstrap.get_initialization_report()
            print(report.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>", ""))
            
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DSL: {result['error']}")
            return False
    
    async def create_application(self) -> Application:
        """–°–æ–∑–¥–∞—Ç—å Telegram Application"""
        if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN!")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DSL —Å–∏—Å—Ç–µ–º—É
        if not await self._initialize_dsl_system():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DSL —Å–∏—Å—Ç–µ–º—É")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        integrator = get_integrator()
        integrator.integrate_with_application(self.application)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._add_system_handlers()
        
        return self.application
    
    def _add_system_handlers(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        from telegram.ext import CommandHandler
        
        # –ö–æ–º–∞–Ω–¥—ã –æ—Ç–ª–∞–¥–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        debug_commands = [
            ('scenario_info', self._debug_scenario_info),
            ('scenario_list', self._debug_scenario_list),
            ('scenario_stats', self._debug_scenario_stats),
            ('scenario_reload', self._debug_scenario_reload),
            ('scenario_cancel', self._debug_scenario_cancel),
        ]
        
        for command, handler in debug_commands:
            self.application.add_handler(CommandHandler(command, handler))
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(debug_commands)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    
    async def _debug_scenario_info(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–¥–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        session = await self.dialog_engine.get_session(user_id, chat_id)
        
        if session:
            registry = get_registry()
            scenario = registry.get_scenario(session.chain_id)
            scenario_name = scenario.metadata.name if scenario else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            info_text = (
                f"üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏</b>\n\n"
                f"üìã <b>–°—Ü–µ–Ω–∞—Ä–∏–π:</b> {scenario_name}\n"
                f"üÜî <b>ID:</b> {session.chain_id}\n"
                f"üìç <b>–¢–µ–∫—É—â–∏–π —à–∞–≥:</b> {session.current_step}\n"
                f"üîò <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {session.state.value}\n"
                f"üîÑ <b>–ü–æ–ø—ã—Ç–æ–∫:</b> {session.retry_count}\n"
                f"üìä <b>–î–∞–Ω–Ω—ã—Ö:</b> {len(session.data)} –ø–æ–ª–µ–π\n"
                f"‚è∞ <b>–°–æ–∑–¥–∞–Ω:</b> {session.created_at}\n"
                f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {session.updated_at}"
            )
        else:
            info_text = "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        await update.message.reply_text(info_text, parse_mode='HTML')
    
    async def _debug_scenario_list(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–¥–∫–∏ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        registry = get_registry()
        scenarios = registry.get_enabled_scenarios()
        
        if scenarios:
            scenarios_text = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n\n"
            
            for scenario_id, scenario in scenarios.items():
                scenarios_text += (
                    f"üìå <b>{scenario.metadata.name}</b>\n"
                    f"   üÜî ID: {scenario_id}\n"
                    f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {scenario.metadata.category.value}\n"
                    f"   üë§ –¢–∏–ø: {scenario.metadata.type.value}\n"
                    f"   üö™ –í—Ö–æ–¥—ã: {', '.join(scenario.entry_points[:3])}\n\n"
                )
        else:
            scenarios_text = "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
        
        await update.message.reply_text(scenarios_text, parse_mode='HTML')
    
    async def _debug_scenario_stats(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–¥–∫–∏ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        registry = get_registry()
        stats = registry.get_statistics()
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
            f"üìã <b>–û–±—â–µ–µ:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {stats['total_scenarios']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled_scenarios']}\n"
            f"‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled_scenarios']}\n"
            f"‚Ä¢ –¢–æ—á–µ–∫ –≤—Ö–æ–¥–∞: {stats['entry_points']}\n\n"
            f"üìÇ <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        )
        
        for category, count in stats['categories'].items():
            if count > 0:
                stats_text += f"‚Ä¢ {category}: {count}\n"
        
        stats_text += f"\nüë§ <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
        for type_name, count in stats['types'].items():
            if count > 0:
                stats_text += f"‚Ä¢ {type_name}: {count}\n"
        
        if stats['missing_dependencies']:
            stats_text += f"\n‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:</b>\n"
            for scenario_id, missing in stats['missing_dependencies'].items():
                stats_text += f"‚Ä¢ {scenario_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {', '.join(missing)}\n"
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
    
    async def _debug_scenario_reload(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–¥–∫–∏ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        from auth_manager import auth_manager
        user_id = update.effective_user.id
        
        if not auth_manager.is_authorized(user_id):
            await update.message.reply_text("üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
            return
        
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
            result = self.scenario_executor.reload_scenarios()
            
            if result['success']:
                reload_text = (
                    f"‚úÖ <b>–°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n\n"
                    f"üìä –ë—ã–ª–æ: {result['old_count']}\n"
                    f"üìä –°—Ç–∞–ª–æ: {result['new_count']}\n"
                    f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ: {result['reloaded']}"
                )
            else:
                reload_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:</b> {result['error']}"
            
            await update.message.reply_text(reload_text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _debug_scenario_cancel(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–¥–∫–∏ - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if await self.scenario_executor.force_stop_execution(user_id, chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
            await update.message.reply_text("‚úÖ –¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    async def cleanup_expired_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
            dialog_expired = await self.dialog_engine.storage.cleanup_expired_sessions(86400)  # 24 —á–∞—Å–∞
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            from auth_manager import auth_manager
            auth_expired = auth_manager.cleanup_expired_sessions()
            
            if dialog_expired > 0 or auth_expired > 0:
                logger.info(f"–û—á–∏—â–µ–Ω–æ —Å–µ—Å—Å–∏–π: –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö {dialog_expired}, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö {auth_expired}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = await self.create_application()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        async def periodic_cleanup():
            while True:
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                await self.cleanup_expired_sessions()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        cleanup_task = asyncio.create_task(periodic_cleanup())
        
        try:
            logger.info("ü§ñ DSL –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            print("ü§ñ DSL –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await self.cleanup_expired_sessions()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            registry = get_registry()
            stats = registry.get_statistics()
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {stats['enabled_scenarios']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await application.run_polling()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            cleanup_task.cancel()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = DSLTelegramBot()
        asyncio.run(bot.run())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()