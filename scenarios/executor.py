#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ DSL —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ Telegram –±–æ—Ç
"""

import logging
import asyncio
from typing import Dict, List, Optional, Any, Callable
from telegram import Update
from telegram.ext import ContextTypes, Application

from dialog_dsl import DialogEngine, DialogSession, DialogState
from .registry import ScenarioRegistry, RegisteredScenario, ScenarioType, get_registry


logger = logging.getLogger(__name__)


class ScenarioExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self, dialog_engine: DialogEngine, registry: ScenarioRegistry = None):
        self.engine = dialog_engine
        self.registry = registry or get_registry()
        self.active_executions: Dict[str, Any] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –¥–≤–∏–∂–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤
        self._register_all_scenarios()
    
    def _register_all_scenarios(self) -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –¥–≤–∏–∂–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤"""
        scenarios = self.registry.get_enabled_scenarios()
        for scenario_id, scenario in scenarios.items():
            self.engine.register_chain(scenario.chain)
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –¥–≤–∏–∂–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤")
    
    async def handle_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            command: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        # –ò—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞
        scenario = self.registry.get_scenario_by_entry_point(command)
        if not scenario:
            return False
        
        if not scenario.metadata.enabled:
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario.metadata.id}' –æ—Ç–∫–ª—é—á–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not await self._check_permissions(update, context, scenario):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        active_session = await self.engine.get_session(user_id, chat_id)
        if active_session and active_session.state == DialogState.WAITING_INPUT:
            await self._handle_session_conflict(update, context, active_session, scenario)
            return True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        try:
            session = await self.engine.start_dialog(user_id, chat_id, scenario.chain.id)
            await self.engine.continue_dialog(update, context, session)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_id = f"{user_id}_{chat_id}_{scenario.chain.id}"
            self.active_executions[execution_id] = {
                "scenario_id": scenario.metadata.id,
                "session": session,
                "started_at": session.created_at
            }
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π '{scenario.metadata.id}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario.metadata.id}': {e}")
            await self._send_error_message(update, context, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return False
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query"""
        if not update.callback_query:
            return False
        
        callback_data = update.callback_query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
        if callback_data.startswith("scenario_"):
            return await self._handle_scenario_control(update, context, callback_data)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –¥–≤–∏–∂–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        session = await self.engine.get_session(user_id, chat_id)
        if session:
            return await self.engine.process_input(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = self.registry.get_scenario_by_entry_point(callback_data)
        if scenario:
            return await self.handle_command(update, context, callback_data)
        
        return False
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = await self.engine.get_session(user_id, chat_id)
        if session and session.state == DialogState.WAITING_INPUT:
            return await self.engine.process_input(update, context)
        
        return False
    
    async def _handle_session_conflict(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                      active_session: DialogSession, new_scenario: RegisteredScenario) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        active_scenario = self.registry.get_scenario(active_session.chain_id)
        active_name = active_scenario.metadata.name if active_scenario else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", 
                                callback_data=f"scenario_continue_{active_session.current_step}")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", 
                                callback_data=f"scenario_start_{new_scenario.metadata.id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", 
                                callback_data=f"scenario_cancel_{active_session.chain_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        conflict_text = (
            f"‚ö†Ô∏è <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
            f"–£ –≤–∞—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ü–µ–Ω–∞—Ä–∏–π:\n"
            f"üìã <b>{active_name}</b>\n"
            f"üìç –®–∞–≥: {active_session.current_step}\n\n"
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:\n"
            f"üìã <b>{new_scenario.metadata.name}</b>\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞–µ–º?"
        )
        
        if update.message:
            await update.message.reply_text(conflict_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(conflict_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def _handle_scenario_control(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     callback_data: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if callback_data.startswith("scenario_continue_"):
            # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            session = await self.engine.get_session(user_id, chat_id)
            if session:
                session.state = DialogState.IN_PROGRESS
                await self.engine.continue_dialog(update, context, session)
                return True
        
        elif callback_data.startswith("scenario_start_"):
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            scenario_id = callback_data.replace("scenario_start_", "")
            scenario = self.registry.get_scenario(scenario_id)
            if scenario:
                # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                await self.engine.cancel_dialog(user_id, chat_id)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
                session = await self.engine.start_dialog(user_id, chat_id, scenario.chain.id)
                await self.engine.continue_dialog(update, context, session)
                return True
        
        elif callback_data.startswith("scenario_cancel_"):
            # –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π
            await self.engine.cancel_dialog(user_id, chat_id)
            await update.callback_query.edit_message_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
            )
            return True
        
        return False
    
    async def _check_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                               scenario: RegisteredScenario) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é"""
        if scenario.metadata.type == ScenarioType.MANAGER:
            from auth_manager import auth_manager
            user_id = update.effective_user.id
            
            if not auth_manager.is_authorized(user_id):
                await self._send_permission_denied(update, context, scenario)
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞
        for permission in scenario.metadata.permissions:
            if permission == "manager":
                from auth_manager import auth_manager
                user_id = update.effective_user.id
                if not auth_manager.is_authorized(user_id):
                    await self._send_permission_denied(update, context, scenario)
                    return False
        
        return True
    
    async def _send_permission_denied(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                    scenario: RegisteredScenario) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
        message = (
            f"üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario.metadata.name}' —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–≤.\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É."
        )
        
        if update.message:
            await update.message.reply_text(message, parse_mode='HTML')
        elif update.callback_query:
            await update.callback_query.answer(message, show_alert=True)
    
    async def _send_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                 error: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n{error}"
        
        if update.message:
            await update.message.reply_text(message, parse_mode='HTML')
        elif update.callback_query:
            await update.callback_query.edit_message_text(message, parse_mode='HTML')
    
    async def get_execution_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        active_count = len(self.active_executions)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenario_type_stats = {}
        for scenario_type in ScenarioType:
            scenarios = self.registry.get_scenarios_by_type(scenario_type)
            scenario_type_stats[scenario_type.value] = len(scenarios)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –¥–≤–∏–∂–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        dialog_stats = await self.engine.storage.cleanup_expired_sessions(max_age=0)  # –ù–µ —É–¥–∞–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º
        
        return {
            "active_executions": active_count,
            "registered_scenarios": len(self.registry.get_all_scenarios()),
            "enabled_scenarios": len(self.registry.get_enabled_scenarios()),
            "scenario_types": scenario_type_stats,
            "registry_stats": self.registry.get_statistics()
        }
    
    async def force_stop_execution(self, user_id: int, chat_id: int, reason: str = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞") -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        session = await self.engine.get_session(user_id, chat_id)
        if session:
            await self.engine.cancel_dialog(user_id, chat_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            execution_id = f"{user_id}_{chat_id}_{session.chain_id}"
            if execution_id in self.active_executions:
                del self.active_executions[execution_id]
            
            logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reason}")
            return True
        
        return False
    
    def reload_scenarios(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            old_count = len(self.registry.get_all_scenarios())
            
            # –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
            self._register_all_scenarios()
            
            new_count = len(self.registry.get_enabled_scenarios())
            
            return {
                "success": True,
                "old_count": old_count,
                "new_count": new_count,
                "reloaded": new_count
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": str(e)
            }


class ScenarioIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å Telegram Application"""
    
    def __init__(self, executor: ScenarioExecutor):
        self.executor = executor
    
    def integrate_with_application(self, application: Application) -> None:
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å Telegram Application"""
        from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        scenarios = self.executor.registry.get_enabled_scenarios()
        entry_points = set()
        
        for scenario in scenarios.values():
            entry_points.update(scenario.entry_points)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        command_entry_points = [ep for ep in entry_points if ep.startswith('/')]
        for command in command_entry_points:
            handler = CommandHandler(
                command.lstrip('/'), 
                self._create_command_handler(command)
            )
            application.add_handler(handler)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenario_callback_handler = CallbackQueryHandler(
            self._handle_scenario_callback,
            pattern="^scenario_"
        )
        application.add_handler(scenario_callback_handler)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
        general_callback_handler = CallbackQueryHandler(
            self._handle_general_callback
        )
        application.add_handler(general_callback_handler)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        text_handler = MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self._handle_text_message
        )
        application.add_handler(text_handler)
        
        logger.info(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {len(command_entry_points)}")
    
    def _create_command_handler(self, command: str) -> Callable:
        """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""
        async def command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await self.executor.handle_command(update, context, command)
        
        command_handler.__name__ = f"handle_{command.lstrip('/').replace('-', '_')}"
        return command_handler
    
    async def _handle_scenario_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        await self.executor.handle_callback(update, context)
    
    async def _handle_general_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—â–∏–π callback"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if await self.executor.handle_callback(update, context):
            return
        
        # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
        # (–∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    
    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if await self.executor.handle_message(update, context):
            return
        
        # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "/manager - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "/help - –ü–æ–º–æ—â—å\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é."
        )


class ScenarioOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏"""
    
    def __init__(self, executor: ScenarioExecutor):
        self.executor = executor
        self.compositions: Dict[str, List[str]] = {}  # composition_id -> scenario_ids
        self.transitions: Dict[str, Dict[str, str]] = {}  # from_scenario -> {condition: to_scenario}
    
    def register_composition(self, composition_id: str, scenario_ids: List[str],
                           name: str = "", description: str = "") -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        missing_scenarios = []
        for scenario_id in scenario_ids:
            if not self.executor.registry.get_scenario(scenario_id):
                missing_scenarios.append(scenario_id)
        
        if missing_scenarios:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏: {missing_scenarios}")
        
        self.compositions[composition_id] = scenario_ids
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è '{composition_id}' –∏–∑ {len(scenario_ids)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    def register_transition(self, from_scenario: str, to_scenario: str, condition: str) -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
        if from_scenario not in self.transitions:
            self.transitions[from_scenario] = {}
        
        self.transitions[from_scenario][condition] = to_scenario
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥: {from_scenario} -> {to_scenario} –ø—Ä–∏ '{condition}'")
    
    async def execute_composition(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                composition_id: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        if composition_id not in self.compositions:
            logger.error(f"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è '{composition_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        scenario_ids = self.compositions[composition_id]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        first_scenario_id = scenario_ids[0]
        first_scenario = self.executor.registry.get_scenario(first_scenario_id)
        
        if not first_scenario:
            logger.error(f"–ü–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ '{first_scenario_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        context.user_data[f"composition_{user_id}_{chat_id}"] = {
            "composition_id": composition_id,
            "scenario_ids": scenario_ids,
            "current_index": 0
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        return await self.executor.handle_command(update, context, first_scenario.entry_points[0])
    
    async def handle_scenario_completion(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                       completed_scenario_id: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        composition_key = f"composition_{user_id}_{chat_id}"
        
        if composition_key not in context.user_data:
            return False
        
        composition_data = context.user_data[composition_key]
        scenario_ids = composition_data["scenario_ids"]
        current_index = composition_data["current_index"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        if completed_scenario_id in self.transitions:
            for condition, next_scenario_id in self.transitions[completed_scenario_id].items():
                if await self._check_transition_condition(update, context, condition):
                    next_scenario = self.executor.registry.get_scenario(next_scenario_id)
                    if next_scenario:
                        return await self.executor.handle_command(update, context, next_scenario.entry_points[0])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        next_index = current_index + 1
        if next_index < len(scenario_ids):
            next_scenario_id = scenario_ids[next_index]
            next_scenario = self.executor.registry.get_scenario(next_scenario_id)
            
            if next_scenario:
                composition_data["current_index"] = next_index
                context.user_data[composition_key] = composition_data
                
                return await self.executor.handle_command(update, context, next_scenario.entry_points[0])
        
        # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        del context.user_data[composition_key]
        await update.message.reply_text(
            f"üéâ <b>–ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenario_ids)}"
        )
        return True
    
    async def _check_transition_condition(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                        condition: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π
        try:
            if condition == "always":
                return True
            elif condition == "never":
                return False
            elif condition.startswith("user_data."):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                key = condition.replace("user_data.", "")
                return bool(context.user_data.get(key))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
        
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
_global_executor: Optional[ScenarioExecutor] = None
_global_integrator: Optional[ScenarioIntegrator] = None
_global_orchestrator: Optional[ScenarioOrchestrator] = None


def get_executor() -> ScenarioExecutor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    global _global_executor
    if _global_executor is None:
        raise RuntimeError("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return _global_executor


def get_integrator() -> ScenarioIntegrator:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    global _global_integrator
    if _global_integrator is None:
        raise RuntimeError("–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return _global_integrator


def get_orchestrator() -> ScenarioOrchestrator:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    global _global_orchestrator
    if _global_orchestrator is None:
        raise RuntimeError("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return _global_orchestrator


def init_scenario_system(dialog_engine: DialogEngine) -> tuple:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    global _global_executor, _global_integrator, _global_orchestrator
    
    _global_executor = ScenarioExecutor(dialog_engine)
    _global_integrator = ScenarioIntegrator(_global_executor)
    _global_orchestrator = ScenarioOrchestrator(_global_executor)
    
    logger.info("–°–∏—Å—Ç–µ–º–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return _global_executor, _global_integrator, _global_orchestrator