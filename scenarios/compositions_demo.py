#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

from .compositions import CompositionBuilder
import logging
from .auto_register import scenario
from .registry import ScenarioType, ScenarioCategory
from dialog_dsl import DialogBuilder, InputType
from .common.validators import CommonValidators

logger = logging.getLogger(__name__)


# === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò ===

@scenario(
    id="demo_greeting",
    name="–î–µ–º–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    type=ScenarioType.USER,
    category=ScenarioCategory.SUPPORT,
    entry_points=["demo_hello"]
)
def create_demo_greeting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    return (DialogBuilder("demo_greeting", "–î–µ–º–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            .start_with("hello")
            
            .add_message(
                step_id="hello",
                message="üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–π.",
                next_step="ask_name"
            )
            
            .add_question(
                step_id="ask_name",
                message="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                input_type=InputType.TEXT,
                validations=[CommonValidators.not_empty()],
                next_step="goodbye"
            )
            
            .add_final(
                step_id="goodbye",
                message="–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {ask_name}! üòä"
            )
            
            .build())


@scenario(
    id="demo_survey",
    name="–î–µ–º–æ –æ–ø—Ä–æ—Å",
    type=ScenarioType.USER,
    category=ScenarioCategory.SUPPORT,
    entry_points=["demo_survey"]
)
def create_demo_survey():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å"""
    return (DialogBuilder("demo_survey", "–î–µ–º–æ –æ–ø—Ä–æ—Å")
            .start_with("survey_start")
            
            .add_message(
                step_id="survey_start",
                message="üìä –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å!",
                next_step="question1"
            )
            
            .add_choice(
                step_id="question1",
                message="–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?",
                inline_keyboard=[
                    [("üòç –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è", "love_it")],
                    [("üòä –ù—Ä–∞–≤–∏—Ç—Å—è", "like_it")],
                    [("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "ok")],
                    [("üòï –ù–µ –æ—á–µ–Ω—å", "not_really")]
                ],
                next_step="question2"
            )
            
            .add_choice(
                step_id="question2",
                message="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –∏–∑—É—á–∞–µ—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?",
                inline_keyboard=[
                    [("üÜï –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª", "just_started")],
                    [("üìÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤", "few_months")],
                    [("üìÜ –ë–æ–ª—å—à–µ –≥–æ–¥–∞", "more_year")],
                    [("üéì –ú–Ω–æ–≥–æ –ª–µ—Ç", "many_years")]
                ],
                next_step="survey_results"
            )
            
            .add_final(
                step_id="survey_results",
                message=(
                    "üìä <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!</b>\n\n"
                    "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n"
                    "‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ: {question1}\n"
                    "‚Ä¢ –û–ø—ã—Ç: {question2}\n\n"
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã! üéØ"
                )
            )
            
            .build())


# === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ü–û–ó–ò–¶–ò–ò ===

def create_demo_user_journey():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏"""
    return (CompositionBuilder("demo_user_journey", "–î–µ–º–æ –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                              "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ –æ–ø—Ä–æ—Å–∞")
            .add_scenarios([
                "demo_greeting",
                "demo_survey"
            ])
            .add_transition("demo_greeting", "demo_survey", "always")
            .set_entry_points(["demo_journey", "demo_flow"])
            .set_metadata(
                demo=True,
                estimated_time="5 –º–∏–Ω—É—Ç",
                difficulty="easy"
            )
            .build())


def create_complete_onboarding():
    """–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    return (CompositionBuilder("complete_onboarding", "–ü–æ–ª–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥",
                              "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏")
            .add_scenarios([
                "user_registration",
                "profile_view"
            ])
            .add_transition("user_registration", "profile_view", "registration_completed==True")
            .set_entry_points(["/onboarding", "full_onboarding"])
            .set_metadata(
                estimated_time="15-20 –º–∏–Ω—É—Ç",
                difficulty="medium",
                completion_rate=0.85
            )
            .build())


def create_manager_dashboard_flow():
    """–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return (CompositionBuilder("manager_dashboard", "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                              "–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            .add_scenarios([
                "manager_auth",
                "admin_stats",
                "user_management", 
                "broadcast_creation",
                "data_export",
                "system_management"
            ])
            # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            .add_transition("manager_auth", "admin_stats", "redirect_stats==True")
            .add_transition("manager_auth", "user_management", "redirect_users==True")
            .add_transition("manager_auth", "broadcast_creation", "redirect_broadcast==True")
            .add_transition("manager_auth", "data_export", "redirect_export==True")
            .add_transition("manager_auth", "system_management", "redirect_settings==True")
            
            # –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            .add_transition("admin_stats", "data_export", "export_stats==True")
            .add_transition("user_management", "data_export", "export_users==True")
            .add_transition("broadcast_creation", "admin_stats", "view_stats_after_broadcast==True")
            
            .set_entry_points(["/dashboard", "manager_panel", "admin_dashboard"])
            .set_metadata(
                estimated_time="–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ",
                difficulty="high",
                requires_auth=True
            )
            .build())


# === –°–ò–°–¢–ï–ú–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–û–ú–ü–û–ó–ò–¶–ò–ô ===

def register_all_compositions():
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
    from .compositions import init_composition_manager, get_composition_manager
    from .executor import get_orchestrator
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
        orchestrator = get_orchestrator()
        composition_manager = init_composition_manager(orchestrator)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        demo_compositions = [
            create_demo_user_journey(),
            create_complete_onboarding()
        ]
        
        for composition in demo_compositions:
            composition_manager.register_composition(composition)
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(demo_compositions)} –∫–æ–º–ø–æ–∑–∏—Ü–∏–π")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π: {e}")
        return False


# === –ê–í–¢–û–ó–ê–ü–£–°–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===

def auto_register_everything():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
        from .auto_register import ScenarioDiscovery
        scenario_stats = ScenarioDiscovery.discover_and_register_all()
        
        if "error" not in scenario_stats:
            logger.info(f"–ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {scenario_stats}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        register_all_compositions()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CLI-–±–ª–æ–∫ —É–¥–∞–ª—ë–Ω, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
    print("This module is not intended to be run directly.")