#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DSL –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏–∏
"""

import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from scenarios.registry import get_registry, ScenarioType
from scenarios.executor import get_executor


logger = logging.getLogger(__name__)


class DSLUserInterface:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ DSL —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.executor = get_executor()
        self.registry = get_registry()
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        user_scenarios = self.registry.get_scenarios_by_type(ScenarioType.USER)
        
        keyboard = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        main_functions = [
            ("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "scenario_profile_view"),
            ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "scenario_profile_edit"),
            ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "scenario_support_request"),
            ("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "scenario_support_faq_only")
        ]
        
        for text, callback_data in main_functions:
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        additional_scenarios = []
        for scenario in user_scenarios:
            if scenario.metadata.enabled and "demo" not in scenario.metadata.tags:
                for entry_point in scenario.entry_points:
                    if not entry_point.startswith("/") and entry_point not in ["start", "registration"]:
                        additional_scenarios.append(
                            (f"üéØ {scenario.metadata.name}", f"scenario_{scenario.metadata.id}")
                        )
                        break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3)
        for text, callback_data in additional_scenarios[:3]:
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        menu_text = (
            "üá¨üáß <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—É–±!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.message:
            await update.message.reply_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        help_text = (
            "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–ª—É–±–µ\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/support - –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
        user_scenarios = self.registry.get_scenarios_by_type(ScenarioType.USER)
        enabled_scenarios = [s for s in user_scenarios if s.metadata.enabled]
        
        for scenario in enabled_scenarios[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            help_text += f"‚Ä¢ {scenario.metadata.name} - {scenario.metadata.description[:50]}...\n"
        
        help_text += (
            f"\nüìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {len(enabled_scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n\n"
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="scenario_support_request")],
            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="scenario_support_faq_only")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        if not update.callback_query:
            return False
        
        callback_data = update.callback_query.data
        
        if callback_data == "show_main_menu":
            await self.show_main_menu(update, context)
            return True
        elif callback_data == "show_help":
            await self.show_help(update, context)
            return True
        elif callback_data.startswith("scenario_"):
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            return await self.executor.handle_callback(update, context)
        
        return False


class DSLManagerInterface:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ DSL —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.executor = get_executor()
        self.registry = get_registry()
    
    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        from auth_manager import auth_manager
        
        user_id = update.effective_user.id
        if not auth_manager.is_authorized(user_id):
            await update.message.reply_text(
                "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manager"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        manager_scenarios = self.registry.get_scenarios_by_type(ScenarioType.MANAGER)
        enabled_scenarios = [s for s in manager_scenarios if s.metadata.enabled]
        
        keyboard = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        main_functions = [
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "scenario_admin_stats"),
            ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "scenario_user_management"),
            ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "scenario_broadcast_creation"),
            ("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "scenario_data_export"),
            ("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "scenario_system_management")
        ]
        
        for text, callback_data in main_functions:
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="reload_scenarios")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="list_scenarios")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="scenario_stats")],
            [InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="manager_logout")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        session_info = auth_manager.get_session_info(user_id)
        time_left = auth_manager.get_session_time_left(user_id)
        
        panel_text = (
            "üîß <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {update.effective_user.first_name}\n"
            f"‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {time_left // 60} –º–∏–Ω {time_left % 60} —Å–µ–∫\n"
            f"üé≠ –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(enabled_scenarios)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.message:
            await update.message.reply_text(panel_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(panel_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_scenario_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        stats = self.registry.get_statistics()
        execution_stats = await self.executor.get_execution_statistics()
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DSL —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            "üé≠ <b>–°—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_scenarios']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled_scenarios']}\n"
            f"‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled_scenarios']}\n"
            f"‚Ä¢ –¢–æ—á–µ–∫ –≤—Ö–æ–¥–∞: {stats['entry_points']}\n\n"
            "üèÉ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {execution_stats['active_executions']}\n\n"
            "üìÇ <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        )
        
        for category, count in stats['categories'].items():
            if count > 0:
                stats_text += f"‚Ä¢ {category}: {count}\n"
        
        stats_text += "\nüë§ <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
        for type_name, count in stats['types'].items():
            if count > 0:
                stats_text += f"‚Ä¢ {type_name}: {count}\n"
        
        if stats['missing_dependencies']:
            stats_text += "\n‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>\n"
            for scenario_id, missing in stats['missing_dependencies'].items():
                stats_text += f"‚Ä¢ {scenario_id}: –Ω–µ—Ç {', '.join(missing)}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_scenario_stats")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="list_all_scenarios")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(stats_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(stats_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_scenario_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        scenarios = self.registry.get_enabled_scenarios()
        
        if not scenarios:
            await update.callback_query.edit_message_text(
                "üì≠ <b>–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>"
            )
            return
        
        scenarios_text = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        by_type = {}
        for scenario in scenarios.values():
            scenario_type = scenario.metadata.type.value
            if scenario_type not in by_type:
                by_type[scenario_type] = []
            by_type[scenario_type].append(scenario)
        
        for type_name, type_scenarios in by_type.items():
            scenarios_text += f"üë§ <b>{type_name.upper()}:</b>\n"
            
            for scenario in type_scenarios[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –Ω–∞ —Ç–∏–ø
                status = "üü¢" if scenario.metadata.enabled else "üî¥"
                scenarios_text += (
                    f"{status} <b>{scenario.metadata.name}</b>\n"
                    f"   üÜî {scenario.metadata.id}\n"
                    f"   üìÇ {scenario.metadata.category.value}\n"
                    f"   üö™ {', '.join(scenario.entry_points[:2])}\n\n"
                )
        
        if len(scenarios) > 15:  # –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–Ω–æ–≥–æ
            scenarios_text += f"... –∏ –µ—â–µ {len(scenarios) - 15} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="scenario_stats")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reload_scenarios")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(scenarios_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not update.callback_query:
            return False
        
        callback_data = update.callback_query.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        from auth_manager import auth_manager
        user_id = update.effective_user.id
        
        admin_callbacks = ["scenario_stats", "list_all_scenarios", "reload_scenarios"]
        if callback_data in admin_callbacks and not auth_manager.is_authorized(user_id):
            await update.callback_query.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞", show_alert=True)
            return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
        if callback_data == "show_admin_panel":
            await self.show_admin_panel(update, context)
            return True
        elif callback_data == "scenario_stats":
            await self.show_scenario_statistics(update, context)
            return True
        elif callback_data == "list_all_scenarios":
            await self.show_scenario_list(update, context)
            return True
        elif callback_data == "reload_scenarios":
            await self._reload_scenarios(update, context)
            return True
        elif callback_data == "back_to_admin_panel":
            await self.show_admin_panel(update, context)
            return True
        elif callback_data.startswith("scenario_"):
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            return await self.executor.handle_callback(update, context)
        
        return False
    
    async def _reload_scenarios(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        try:
            result = self.executor.reload_scenarios()
            
            if result['success']:
                reload_text = (
                    f"‚úÖ <b>–°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n\n"
                    f"üìä –ë—ã–ª–æ: {result['old_count']}\n"
                    f"üìä –°—Ç–∞–ª–æ: {result['new_count']}\n"
                    f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result['reloaded']}"
                )
            else:
                reload_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:</b>\n{result['error']}"
            
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="list_all_scenarios")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                reload_text, parse_mode='HTML', reply_markup=reply_markup
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n{e}",
                parse_mode='HTML'
            )


class DSLCompositionInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.executor = get_executor()
        self.registry = get_registry()
    
    async def show_compositions_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–ø–æ–∑–∏—Ü–∏–π"""
        from scenarios.compositions import get_composition_manager
        
        try:
            composition_manager = get_composition_manager()
            compositions = composition_manager.registry.compositions
            
            keyboard = []
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            user_compositions = [
                ("üéØ –ü–æ–ª–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥", "composition_complete_onboarding"),
                ("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º", "composition_profile_management"),
                ("üìû –ü–æ—Ç–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "composition_user_support_flow")
            ]
            
            for text, callback_data in user_compositions:
                keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
            
            # –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            from auth_manager import auth_manager
            user_id = update.effective_user.id
            
            if auth_manager.is_authorized(user_id):
                keyboard.append([InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="composition_manager_dashboard")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            menu_text = (
                "üé≠ <b>–ö–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                "–ö–æ–º–ø–æ–∑–∏—Ü–∏–∏ - —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π: {len(compositions)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é:"
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await update.message.reply_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π: {e}"
            if update.callback_query:
                await update.callback_query.edit_message_text(error_text)
            else:
                await update.message.reply_text(error_text)
    
    async def handle_composition_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏–π"""
        if not update.callback_query:
            return False
        
        callback_data = update.callback_query.data
        
        if callback_data.startswith("composition_"):
            composition_id = callback_data.replace("composition_", "")
            
            try:
                from scenarios.compositions import get_composition_manager
                composition_manager = get_composition_manager()
                
                success = await composition_manager.execute_composition(update, context, composition_id)
                
                if not success:
                    await update.callback_query.edit_message_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é '{composition_id}'"
                    )
                
                return True
                
            except Exception as e:
                await update.callback_query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {e}"
                )
                return True
        
        return False


class DSLSystemInterface:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DSL"""
    
    def __init__(self):
        self.executor = get_executor()
        self.registry = get_registry()
    
    async def show_system_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        from auth_manager import auth_manager
        user_id = update.effective_user.id
        
        if not auth_manager.is_authorized(user_id):
            await update.message.reply_text("üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
            return
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
            registry_stats = self.registry.get_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_stats = await self.executor.get_execution_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
            try:
                from scenarios.compositions import get_composition_manager
                composition_manager = get_composition_manager()
                composition_count = len(composition_manager.registry.compositions)
            except:
                composition_count = 0
            
            status_text = (
                "üñ•Ô∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ DSL —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                "üé≠ <b>–°—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n"
                f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registry_stats['total_scenarios']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {registry_stats['enabled_scenarios']}\n"
                f"‚Ä¢ –¢–æ—á–µ–∫ –≤—Ö–æ–¥–∞: {registry_stats['entry_points']}\n\n"
                "üèÉ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {execution_stats['active_executions']}\n\n"
                "üé≠ <b>–ö–æ–º–ø–æ–∑–∏—Ü–∏–∏:</b>\n"
                f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {composition_count}\n\n"
                "üìä <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
            )
            
            for type_name, count in execution_stats['scenario_types'].items():
                if count > 0:
                    status_text += f"‚Ä¢ {type_name}: {count}\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_system_status")],
                [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏", callback_data="cleanup_sessions")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(status_text, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await update.message.reply_text(status_text, parse_mode='HTML', reply_markup=reply_markup)
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}"
            if update.callback_query:
                await update.callback_query.edit_message_text(error_text)
            else:
                await update.message.reply_text(error_text)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
_user_interface: Optional[DSLUserInterface] = None
_manager_interface: Optional[DSLManagerInterface] = None
_composition_interface: Optional[DSLCompositionInterface] = None
_system_interface: Optional[DSLSystemInterface] = None


def get_user_interface() -> DSLUserInterface:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global _user_interface
    if _user_interface is None:
        _user_interface = DSLUserInterface()
    return _user_interface


def get_manager_interface() -> DSLManagerInterface:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global _manager_interface
    if _manager_interface is None:
        _manager_interface = DSLManagerInterface()
    return _manager_interface


def get_composition_interface() -> DSLCompositionInterface:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–ø–æ–∑–∏—Ü–∏–π"""
    global _composition_interface
    if _composition_interface is None:
        _composition_interface = DSLCompositionInterface()
    return _composition_interface


def get_system_interface() -> DSLSystemInterface:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global _system_interface
    if _system_interface is None:
        _system_interface = DSLSystemInterface()
    return _system_interface