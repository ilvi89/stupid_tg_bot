#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
–í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import logging
import sqlite3
import os
import csv
from datetime import datetime
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from dialog_config import DIALOG_TEXTS, BUTTONS, SETTINGS, FILES
from auth_manager import auth_manager
from user_interface import UserInterface
from manager_interface import ManagerInterface

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = os.getenv('LOG_LEVEL', 'INFO')
log_file = os.getenv('LOG_FILE')

logging_config = {
    'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    'level': getattr(logging, log_level.upper())
}

if log_file:
    logging_config['filename'] = log_file

logging.basicConfig(**logging_config)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_NAME, WAITING_EXPERIENCE, WAITING_AGE, FINAL_CONSENT = range(4)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
DATABASE_PATH = os.getenv('DATABASE_PATH', 'english_club.db')

class EnglishClubBot:
    def __init__(self):
        self.db_path = DATABASE_PATH
        self.init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        self.user_interface = UserInterface(self.db_path)
        self.manager_interface = ManagerInterface(self.db_path)
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                name TEXT NOT NULL,
                age INTEGER,
                english_experience TEXT,
                data_consent BOOLEAN DEFAULT 0,
                newsletter_consent BOOLEAN DEFAULT 0,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def save_user_data(self, user_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (telegram_id, username, name, age, english_experience, data_consent, newsletter_consent)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_data['telegram_id'],
            user_data.get('username', ''),
            user_data['name'],
            user_data.get('age'),
            user_data.get('english_experience'),
            user_data.get('data_consent', False),
            user_data.get('newsletter_consent', False)
        ))
        
        conn.commit()
        conn.close()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = EnglishClubBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    context.user_data['telegram_id'] = user.id
    context.user_data['username'] = user.username
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    keyboard = [
        [InlineKeyboardButton(BUTTONS['data_consent']['yes'], callback_data="data_consent_yes")],
        [InlineKeyboardButton(BUTTONS['data_consent']['no'], callback_data="data_consent_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = DIALOG_TEXTS['welcome']['full_text']
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return WAITING_NAME

async def handle_data_consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "data_consent_yes":
        context.user_data['data_consent'] = True
        
        await query.edit_message_text(
            DIALOG_TEXTS['data_consent']['approved'],
            parse_mode='HTML'
        )
        
        return WAITING_NAME
    else:
        await query.edit_message_text(
            DIALOG_TEXTS['data_consent']['denied']
        )
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–ø—ã—Ç–µ"""
    if not context.user_data.get('data_consent'):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–∞–≤ /start"
        )
        return ConversationHandler.END
    
    name = update.message.text.strip()
    context.user_data['name'] = name
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–± –æ–ø—ã—Ç–µ
    keyboard = [
        [KeyboardButton(BUTTONS['experience']['yes'])],
        [KeyboardButton(BUTTONS['experience']['no'])]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    greeting_text = DIALOG_TEXTS['name_received']['greeting'].format(name=name)
    question_text = DIALOG_TEXTS['name_received']['question']
    
    await update.message.reply_text(
        f"{greeting_text}\n\n{question_text}",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return WAITING_EXPERIENCE

async def get_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—ã—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤–æ–∑—Ä–∞—Å—Ç–µ"""
    experience = update.message.text.strip()
    
    if "–¥–∞" in experience.lower() or "‚úÖ" in experience:
        context.user_data['english_experience'] = "–î–∞"
        response = DIALOG_TEXTS['experience']['yes_response']
    else:
        context.user_data['english_experience'] = "–ù–µ—Ç"
        response = DIALOG_TEXTS['experience']['no_response']
    
    await update.message.reply_text(
        f"{response}\n\n"
        f"{DIALOG_TEXTS['age']['question']}",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    
    return WAITING_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é"""
    try:
        age = int(update.message.text.strip())
        min_age = SETTINGS['age_limits']['min']
        max_age = SETTINGS['age_limits']['max']
        
        if age < min_age or age > max_age:
            await update.message.reply_text(
                DIALOG_TEXTS['age']['invalid_age'].format(min_age=min_age, max_age=max_age)
            )
            return WAITING_AGE
        
        context.user_data['age'] = age
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è
        keyboard = [
            [InlineKeyboardButton(BUTTONS['newsletter']['yes'], callback_data="newsletter_yes")],
            [InlineKeyboardButton(BUTTONS['newsletter']['no'], callback_data="newsletter_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–ù–ê–û–ü –≤–º–µ—Å—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        snaop_file = FILES['snaop']
        if os.path.exists(snaop_file):
            await update.message.reply_document(
                document=open(snaop_file, 'rb'),
                caption=(
                    f"{DIALOG_TEXTS['notifications']['final_greeting'].format(name=context.user_data['name'])}\n\n"
                    f"{DIALOG_TEXTS['notifications']['info']}\n\n"
                    f"üìÑ <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>"
                ),
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"{DIALOG_TEXTS['notifications']['final_greeting'].format(name=context.user_data['name'])}\n\n"
                f"{DIALOG_TEXTS['notifications']['info']}",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        
        return FINAL_CONSENT
        
    except ValueError:
        await update.message.reply_text(
            DIALOG_TEXTS['age']['invalid_format']
        )
        return WAITING_AGE

async def final_consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "newsletter_yes":
        context.user_data['newsletter_consent'] = True
        consent_text = DIALOG_TEXTS['newsletter']['yes_response']
    else:
        context.user_data['newsletter_consent'] = False
        consent_text = DIALOG_TEXTS['newsletter']['no_response']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    bot_instance.save_user_data(context.user_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è)
    consent_file = FILES['newsletter_consent']
    if os.path.exists(consent_file) and context.user_data.get('newsletter_consent'):
        await query.message.reply_document(
            document=open(consent_file, 'rb'),
            caption="üìÑ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
    
    newsletter_status = '‚úÖ' if context.user_data.get('newsletter_consent') else '‚ùå'
    
    summary = DIALOG_TEXTS['registration_complete']['summary_template'].format(
        name=context.user_data['name'],
        age=context.user_data['age'],
        experience=context.user_data['english_experience'],
        newsletter_status=newsletter_status
    )
    
    final_message = (
        f"{consent_text}\n\n"
        f"{DIALOG_TEXTS['registration_complete']['title']}\n\n"
        f"{DIALOG_TEXTS['registration_complete']['summary_title']}\n"
        f"{summary}\n\n"
        f"{DIALOG_TEXTS['registration_complete']['welcome']}\n"
        f"{DIALOG_TEXTS['registration_complete']['next_steps']}"
    )
    
    await query.edit_message_text(
        final_message,
        parse_mode='HTML'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        DIALOG_TEXTS['cancel']['message']
    )
    context.user_data.clear()
    return ConversationHandler.END

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        DIALOG_TEXTS['help']['user_commands'],
        parse_mode='HTML'
    )

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await bot_instance.user_interface.show_user_menu(update, context)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–∫–µ callback_query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class FakeCallbackQuery:
        def __init__(self, user, message):
            self.from_user = user
            self.message = message
        async def answer(self): pass
        async def edit_message_text(self, text, **kwargs):
            await self.message.reply_text(text, **kwargs)
    
    fake_query = FakeCallbackQuery(update.effective_user, update.message)
    update.callback_query = fake_query
    
    await bot_instance.user_interface.show_user_profile(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /manager"""
    await bot_instance.manager_interface.request_auth(update, context)

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–∞—Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if await bot_instance.manager_interface.handle_password(update, context):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if await bot_instance.manager_interface.handle_broadcast_message(update, context):
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏ /start\n\n"
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–º–æ—â—å"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö
async def handle_user_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    query = update.callback_query
    data = query.data
    
    if data == "user_menu":
        await bot_instance.user_interface.show_user_menu(update, context)
    elif data == "user_profile":
        await bot_instance.user_interface.show_user_profile(update, context)
    elif data == "user_help":
        await bot_instance.user_interface.show_user_help(update, context)
    elif data == "user_settings":
        await bot_instance.user_interface.show_user_settings(update, context)
    elif data.startswith("user_toggle_newsletter_"):
        await bot_instance.user_interface.toggle_newsletter(update, context)
    elif data == "user_delete_confirm":
        await bot_instance.user_interface.confirm_delete_account(update, context)
    elif data == "user_delete_confirmed":
        await bot_instance.user_interface.delete_user_account(update, context)
    elif data == "user_support":
        await bot_instance.user_interface.show_support_info(update, context)
    elif data == "user_materials":
        await bot_instance.user_interface.show_materials(update, context)

async def handle_manager_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    query = update.callback_query
    data = query.data
    
    if data == "mgr_menu":
        await bot_instance.manager_interface.show_manager_menu(update, context)
    elif data == "mgr_stats":
        await bot_instance.manager_interface.show_detailed_stats(update, context)
    elif data == "mgr_users" or data.startswith("mgr_users_page_"):
        page = 1
        if data.startswith("mgr_users_page_"):
            page = int(data.split("_")[-1])
        await bot_instance.manager_interface.show_users_list(update, context, page)
    elif data == "mgr_export":
        await bot_instance.manager_interface.export_users_data(update, context)
    elif data == "mgr_broadcast":
        await bot_instance.manager_interface.start_broadcast(update, context)
    elif data == "mgr_broadcast_confirm":
        await bot_instance.manager_interface.confirm_broadcast(update, context)
    elif data == "mgr_broadcast_cancel":
        await bot_instance.manager_interface.cancel_broadcast(update, context)
    elif data == "mgr_settings":
        await bot_instance.manager_interface.show_bot_settings(update, context)
    elif data == "mgr_logout":
        await bot_instance.manager_interface.logout(update, context)
    elif data == "mgr_clear":
        await clear_manager_data(query)
    elif data == "confirm_clear":
        await confirm_clear_data(query)
    elif data == "manager_cancel":
        await manager_cancel(query)

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect(bot_instance.db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE newsletter_consent = 1")
    newsletter_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE english_experience = '–î–∞'")
    experienced_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT AVG(age) FROM users WHERE age IS NOT NULL")
    avg_age = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
        f"üìß –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {newsletter_users}\n"
        f"üìö –° –æ–ø—ã—Ç–æ–º –∏–∑—É—á–µ–Ω–∏—è: {experienced_users}\n"
        f"üÜï –ù–æ–≤–∏—á–∫–∏: {total_users - experienced_users}"
    )
    
    if avg_age:
        stats_text += f"\nüéÇ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age:.1f} –ª–µ—Ç"
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

# –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def manager_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    await manager_command(update, context)

async def handle_manager_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–≥–æ –º–µ–Ω—é - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    await handle_manager_callbacks(update, context)

async def show_manager_stats(query) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    conn = sqlite3.connect(bot_instance.db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE newsletter_consent = 1")
    newsletter_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE english_experience = '–î–∞'")
    experienced_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT AVG(age) FROM users WHERE age IS NOT NULL")
    avg_age = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE registration_date >= date('now', '-7 days')")
    new_week = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
        f"üìß –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {newsletter_users}\n"
        f"üìö –° –æ–ø—ã—Ç–æ–º –∏–∑—É—á–µ–Ω–∏—è: {experienced_users}\n"
        f"üÜï –ù–æ–≤–∏—á–∫–∏: {total_users - experienced_users}\n"
        f"üìÖ –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}"
    )
    
    if avg_age:
        stats_text += f"\nüéÇ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age:.1f} –ª–µ—Ç"
    
    await query.edit_message_text(stats_text, parse_mode='HTML')

async def show_manager_users(query) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect(bot_instance.db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT name, age, english_experience, newsletter_consent, registration_date
        FROM users ORDER BY registration_date DESC LIMIT 10
    ''')
    
    users = cursor.fetchall()
    conn.close()
    
    if not users:
        await query.edit_message_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    for user in users:
        name, age, experience, newsletter, reg_date = user
        newsletter_status = "‚úÖ" if newsletter else "‚ùå"
        users_text += f"üë§ <b>{name}</b>, {age} –ª–µ—Ç\n"
        users_text += f"   üìö –û–ø—ã—Ç: {experience}\n"
        users_text += f"   üìß –†–∞—Å—Å—ã–ª–∫–∞: {newsletter_status}\n"
        users_text += f"   üìÖ {reg_date}\n\n"
    
    await query.edit_message_text(users_text, parse_mode='HTML')

async def export_manager_data(query) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect(bot_instance.db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT telegram_id, username, name, age, english_experience, 
               data_consent, newsletter_consent, registration_date
        FROM users ORDER BY registration_date DESC
    ''')
    
    users = cursor.fetchall()
    conn.close()
    
    if not users:
        await query.edit_message_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow([
            'Telegram ID', 'Username', '–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–û–ø—ã—Ç –∏–∑—É—á–µ–Ω–∏—è',
            '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ', '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        ])
        
        for user in users:
            writer.writerow(user)
    
    await query.edit_message_text(
        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
        f"üìÅ –§–∞–π–ª: {filename}\n"
        f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        parse_mode='HTML'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await query.message.reply_document(
        document=open(filename, 'rb'),
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} –∑–∞–ø–∏—Å–µ–π)"
    )

async def clear_manager_data(query) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É –ë–î"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_clear")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manager_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def confirm_clear_data(query) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    conn = sqlite3.connect(bot_instance.db_path)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users")
    conn.commit()
    conn.close()
    
    await query.edit_message_text(
        "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode='HTML'
    )

async def manager_cancel(query) -> None:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN!")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WAITING_NAME: [
                CallbackQueryHandler(handle_data_consent, pattern="^data_consent_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)
            ],
            WAITING_EXPERIENCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_experience)
            ],
            WAITING_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)
            ],
            FINAL_CONSENT: [
                CallbackQueryHandler(final_consent, pattern="^newsletter_")
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('menu', menu_command))
    application.add_handler(CommandHandler('profile', profile_command))
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('admin', admin_stats))
    application.add_handler(CommandHandler('manager', manager_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(handle_user_callbacks, pattern="^user_"))
    application.add_handler(CallbackQueryHandler(handle_manager_callbacks, pattern="^mgr_"))
    
    # –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    application.add_handler(CallbackQueryHandler(handle_manager_callback, pattern="^manager_"))
    application.add_handler(CallbackQueryHandler(confirm_clear_data, pattern="^confirm_clear$"))
    application.add_handler(CallbackQueryHandler(manager_cancel, pattern="^manager_cancel$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    expired_count = auth_manager.cleanup_expired_sessions()
    if expired_count > 0:
        logger.info(f"–û—á–∏—â–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
    
    application.run_polling()

if __name__ == '__main__':
    main()