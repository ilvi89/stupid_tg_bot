#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
"""

import logging
import sqlite3
import os
from datetime import datetime
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_NAME, WAITING_EXPERIENCE, WAITING_AGE, FINAL_CONSENT = range(4)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

class EnglishClubBot:
    def __init__(self):
        self.db_path = 'english_club.db'
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                name TEXT NOT NULL,
                age INTEGER,
                english_experience TEXT,
                data_consent BOOLEAN DEFAULT 0,
                newsletter_consent BOOLEAN DEFAULT 0,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def save_user_data(self, user_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (telegram_id, username, name, age, english_experience, data_consent, newsletter_consent)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_data['telegram_id'],
            user_data.get('username', ''),
            user_data['name'],
            user_data.get('age'),
            user_data.get('english_experience'),
            user_data.get('data_consent', False),
            user_data.get('newsletter_consent', False)
        ))
        
        conn.commit()
        conn.close()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = EnglishClubBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    context.user_data['telegram_id'] = user.id
    context.user_data['username'] = user.username
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö", callback_data="data_consent_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="data_consent_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üá¨üáß <b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—É–±!</b>\n\n"
        "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:"
    )
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return WAITING_NAME

async def handle_data_consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "data_consent_yes":
        context.user_data['data_consent'] = True
        
        await query.edit_message_text(
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ.</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòä",
            parse_mode='HTML'
        )
        
        return WAITING_NAME
    else:
        await query.edit_message_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start —Å–Ω–æ–≤–∞! üòä"
        )
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–ø—ã—Ç–µ"""
    if not context.user_data.get('data_consent'):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–∞–≤ /start"
        )
        return ConversationHandler.END
    
    name = update.message.text.strip()
    context.user_data['name'] = name
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–± –æ–ø—ã—Ç–µ
    keyboard = [
        [KeyboardButton("‚úÖ –î–∞, –∏–∑—É—á–∞–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")],
        [KeyboardButton("‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, <b>{name}</b>! üòä\n\n"
        f"–¢—ã —É–∂–µ –∏–∑—É—á–∞–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ä–∞–Ω—å—à–µ?",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return WAITING_EXPERIENCE

async def get_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—ã—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤–æ–∑—Ä–∞—Å—Ç–µ"""
    experience = update.message.text.strip()
    
    if "–¥–∞" in experience.lower() or "‚úÖ" in experience:
        context.user_data['english_experience'] = "–î–∞"
        response = "–û—Ç–ª–∏—á–Ω–æ! üëç"
    else:
        context.user_data['english_experience'] = "–ù–µ—Ç"
        response = "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—Å–µ –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞—á–∏–Ω–∞–ª–∏! üåü"
    
    await update.message.reply_text(
        f"{response}\n\n"
        f"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É)",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    
    return WAITING_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é"""
    try:
        age = int(update.message.text.strip())
        if age < 5 or age > 100:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 5 –¥–æ 100 –ª–µ—Ç) üòä"
            )
            return WAITING_AGE
        
        context.user_data['age'] = age
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="newsletter_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="newsletter_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–ù–ê–û–ü (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        snaop_file = "–°–Ω–∞–û–ü —Å –ø—Ä–æ—á–µ—Ä–∫–∞–º–∏.pdf"
        if os.path.exists(snaop_file):
            await update.message.reply_document(
                document=open(snaop_file, 'rb'),
                caption="üìÑ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
        
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, {context.user_data['name']}! üéâ\n\n"
            f"<b>–í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, "
            f"–ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∫–ª—É–±–∞!</b>\n\n"
            f"–î–ª—è —ç—Ç–æ–≥–æ:\n"
            f"1. –ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞\n"
            f"2. –í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî\n\n"
            f"–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
        return FINAL_CONSENT
        
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25) üòä"
        )
        return WAITING_AGE

async def final_consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "newsletter_yes":
        context.user_data['newsletter_consent'] = True
        consent_text = "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã!</b>"
    else:
        context.user_data['newsletter_consent'] = False
        consent_text = "‚úÖ <b>–•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –±—É–¥—É.</b>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    bot_instance.save_user_data(context.user_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    consent_file = "–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_—Ä–∞—Å—Å—ã–ª–∫—É_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö_–∏_—Ä–µ–∫–ª–∞–º–Ω—ã—Ö_—Å–æ–æ–±—â–µ–Ω–∏–π_—Å_–ø—Ä–æ—á–µ—Ä–∫–∞–º–∏.pdf"
    if os.path.exists(consent_file) and context.user_data.get('newsletter_consent'):
        await query.message.reply_document(
            document=open(consent_file, 'rb'),
            caption="üìÑ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
    
    final_message = (
        f"{consent_text}\n\n"
        f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"<b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"‚Ä¢ –ò–º—è: {context.user_data['name']}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']} –ª–µ—Ç\n"
        f"‚Ä¢ –û–ø—ã—Ç –∏–∑—É—á–µ–Ω–∏—è: {context.user_data['english_experience']}\n"
        f"‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ: ‚úÖ\n"
        f"‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {'‚úÖ' if context.user_data.get('newsletter_consent') else '‚ùå'}\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—É–±! üá¨üáß\n"
        f"–°–∫–æ—Ä–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö! üìö"
    )
    
    await query.edit_message_text(
        final_message,
        parse_mode='HTML'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start! üòä"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect(bot_instance.db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE newsletter_consent = 1")
    newsletter_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE english_experience = '–î–∞'")
    experienced_users = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
        f"üìß –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {newsletter_users}\n"
        f"üìö –° –æ–ø—ã—Ç–æ–º –∏–∑—É—á–µ–Ω–∏—è: {experienced_users}\n"
        f"üÜï –ù–æ–≤–∏—á–∫–∏: {total_users - experienced_users}"
    )
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN!")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WAITING_NAME: [
                CallbackQueryHandler(handle_data_consent, pattern="^data_consent_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)
            ],
            WAITING_EXPERIENCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_experience)
            ],
            WAITING_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)
            ],
            FINAL_CONSENT: [
                CallbackQueryHandler(final_consent, pattern="^newsletter_")
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('admin', admin_stats))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()