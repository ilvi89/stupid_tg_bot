#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DSL —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
"""

import logging
from typing import Optional, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes

from dialog_dsl import DialogEngine, DialogSession, DialogState, init_dialog_engine, get_dialog_engine
from dialog_maps import dialog_map


logger = logging.getLogger(__name__)


class DialogHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, db_path: str):
        self.engine = init_dialog_engine(db_path)
        self._register_all_dialogs()
    
    def _register_all_dialogs(self):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –¥–≤–∏–∂–∫–µ"""
        all_dialogs = dialog_map.get_all_dialogs()
        for dialog in all_dialogs.values():
            self.engine.register_chain(dialog)
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
    
    async def handle_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, command: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        active_session = await self.engine.get_session(user_id, chat_id)
        if active_session and active_session.state == DialogState.WAITING_INPUT:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
            await self._offer_dialog_completion(update, context, active_session, command)
            return True
        
        # –ò—â–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        dialog, user_type = dialog_map.get_dialog_by_entry(command)
        if dialog:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not await self._check_permissions(update, context, dialog, user_type):
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
            session = await self.engine.start_dialog(user_id, chat_id, dialog.id)
            await self.engine.continue_dialog(update, context, session)
            return True
        
        return False
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query"""
        if not update.callback_query:
            return False
        
        callback_data = update.callback_query.data
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        if callback_data.startswith("dialog_"):
            return await self._handle_dialog_recovery(update, context, callback_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = await self.engine.get_session(user_id, chat_id)
        if session:
            return await self.engine.process_input(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        dialog, user_type = dialog_map.get_dialog_by_entry(callback_data)
        if dialog:
            if not await self._check_permissions(update, context, dialog, user_type):
                return False
            
            session = await self.engine.start_dialog(user_id, chat_id, dialog.id)
            await self.engine.continue_dialog(update, context, session)
            return True
        
        return False
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = await self.engine.get_session(user_id, chat_id)
        if session and session.state == DialogState.WAITING_INPUT:
            return await self.engine.process_input(update, context)
        
        return False
    
    async def _handle_dialog_recovery(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    callback_data: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if callback_data.startswith("dialog_continue_"):
            # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            session = await self.engine.get_session(user_id, chat_id)
            if session:
                session.state = DialogState.IN_PROGRESS
                await self.engine.continue_dialog(update, context, session)
                return True
        
        elif callback_data.startswith("dialog_restart_"):
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
            chain_id = callback_data.replace("dialog_restart_", "")
            session = await self.engine.restart_dialog(user_id, chat_id, chain_id)
            await self.engine.continue_dialog(update, context, session)
            return True
        
        elif callback_data == "dialog_cancel":
            # –û—Ç–º–µ–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥
            await self.engine.cancel_dialog(user_id, chat_id)
            await update.callback_query.edit_message_text(
                "‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
            )
            return True
        
        return False
    
    async def _offer_dialog_completion(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     active_session: DialogSession, new_command: str) -> None:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        chain = self.engine.chains[active_session.chain_id]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥", 
                                callback_data=f"dialog_continue_{active_session.current_step}")],
            [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", 
                                callback_data=f"dialog_new_{new_command}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥", 
                                callback_data="dialog_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ö†Ô∏è <b>–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥: {chain.name}\n"
            f"–®–∞–≥: {active_session.current_step}\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def _check_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                               dialog: DialogChain, user_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏–∞–ª–æ–≥—É"""
        if "manager" in dialog.permissions:
            from auth_manager import auth_manager
            user_id = update.effective_user.id
            
            if not auth_manager.is_authorized(user_id):
                await update.message.reply_text(
                    "üîí –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manager –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
                )
                return False
        
        return True
    
    async def get_session_info(self, user_id: int, chat_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        session = await self.engine.get_session(user_id, chat_id)
        if session:
            chain = self.engine.chains.get(session.chain_id)
            return {
                "chain_name": chain.name if chain else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "current_step": session.current_step,
                "state": session.state.value,
                "data": session.data,
                "retry_count": session.retry_count,
                "created_at": session.created_at,
                "updated_at": session.updated_at
            }
        return None
    
    async def cleanup_expired_sessions(self, max_age: int = 86400) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏"""
        return await self.engine.storage.cleanup_expired_sessions(max_age)
    
    async def force_cancel_session(self, user_id: int, chat_id: int) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        session = await self.engine.get_session(user_id, chat_id)
        if session:
            await self.engine.cancel_dialog(user_id, chat_id)
            return True
        return False
    
    async def get_all_active_sessions(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö"""
        sessions_info = {}
        for (user_id, chat_id), session in self.engine.active_sessions.items():
            chain = self.engine.chains.get(session.chain_id)
            sessions_info[f"{user_id}_{chat_id}"] = {
                "user_id": user_id,
                "chat_id": chat_id,
                "chain_name": chain.name if chain else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "current_step": session.current_step,
                "state": session.state.value,
                "created_at": session.created_at,
                "updated_at": session.updated_at
            }
        return sessions_info


# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–´–ú –ë–û–¢–û–ú ===

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_handler: Optional[DialogHandler] = None


def init_dialog_handler(db_path: str) -> DialogHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
    global dialog_handler
    dialog_handler = DialogHandler(db_path)
    return dialog_handler


def get_dialog_handler() -> DialogHandler:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    global dialog_handler
    if dialog_handler is None:
        raise RuntimeError("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return dialog_handler


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –î–ò–ê–õ–û–ì–û–í ===

async def debug_dialog_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    handler = get_dialog_handler()
    session_info = await handler.get_session_info(user_id, chat_id)
    
    if session_info:
        info_text = (
            f"üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ</b>\n\n"
            f"<b>–î–∏–∞–ª–æ–≥:</b> {session_info['chain_name']}\n"
            f"<b>–¢–µ–∫—É—â–∏–π —à–∞–≥:</b> {session_info['current_step']}\n"
            f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {session_info['state']}\n"
            f"<b>–ü–æ–ø—ã—Ç–æ–∫:</b> {session_info['retry_count']}\n"
            f"<b>–î–∞–Ω–Ω—ã–µ:</b> {len(session_info['data'])} –ø–æ–ª–µ–π\n"
            f"<b>–°–æ–∑–¥–∞–Ω:</b> {session_info['created_at']}\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {session_info['updated_at']}"
        )
    else:
        info_text = "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    await update.message.reply_text(info_text, parse_mode='HTML')


async def debug_cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    handler = get_dialog_handler()
    if await handler.force_cancel_session(user_id, chat_id):
        await update.message.reply_text("‚úÖ –¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def debug_all_sessions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    from auth_manager import auth_manager
    
    user_id = update.effective_user.id
    if not auth_manager.is_authorized(user_id):
        await update.message.reply_text("üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
        return
    
    handler = get_dialog_handler()
    sessions = await handler.get_all_active_sessions()
    
    if sessions:
        sessions_text = "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n\n"
        for session_key, session_info in sessions.items():
            sessions_text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {session_info['user_id']}\n"
                f"   üí¨ –ß–∞—Ç: {session_info['chat_id']}\n"
                f"   üîÑ –î–∏–∞–ª–æ–≥: {session_info['chain_name']}\n"
                f"   üìç –®–∞–≥: {session_info['current_step']}\n"
                f"   üîò –°–æ—Å—Ç–æ—è–Ω–∏–µ: {session_info['state']}\n\n"
            )
    else:
        sessions_text = "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    await update.message.reply_text(sessions_text, parse_mode='HTML')


# === –ú–ò–ì–†–ê–¶–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ö–û–î–ê ===

class DialogMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∞–ª–æ–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    @staticmethod
    async def migrate_conversation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                         handler_name: str) -> bool:
        """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ConversationHandler –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ö–∞—Ä—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –Ω–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
        migration_map = {
            "start": ("user_registration", {}),
            "manager": ("manager_auth", {}),
            "WAITING_NAME": ("user_registration", {"current_step": "name_question_step"}),
            "WAITING_EXPERIENCE": ("user_registration", {"current_step": "experience_question_step"}),
            "WAITING_AGE": ("user_registration", {"current_step": "age_question_step"}),
            "FINAL_CONSENT": ("user_registration", {"current_step": "newsletter_question_step"}),
        }
        
        if handler_name in migration_map:
            dialog_id, session_data = migration_map[handler_name]
            
            handler = get_dialog_handler()
            session = await handler.engine.start_dialog(user_id, chat_id, dialog_id, session_data)
            await handler.engine.continue_dialog(update, context, session)
            return True
        
        return False


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===

class DialogAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
    
    async def get_dialog_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–ª–æ–≥–∞–º"""
        import sqlite3
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM dialog_sessions")
        total_sessions = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM dialog_sessions WHERE state = 'completed'")
        completed_sessions = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM dialog_sessions WHERE state = 'error'")
        error_sessions = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∏–∞–ª–æ–≥–æ–≤
        cursor.execute("""
            SELECT chain_id, COUNT(*) as count, 
                   AVG(updated_at - created_at) as avg_duration
            FROM dialog_sessions 
            WHERE state = 'completed'
            GROUP BY chain_id
        """)
        chain_stats = cursor.fetchall()
        
        conn.close()
        
        return {
            "total_sessions": total_sessions,
            "completed_sessions": completed_sessions,
            "error_sessions": error_sessions,
            "completion_rate": completed_sessions / total_sessions if total_sessions > 0 else 0,
            "chain_stats": {
                row[0]: {
                    "count": row[1],
                    "avg_duration": row[2]
                } for row in chain_stats
            }
        }
    
    async def get_error_analysis(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö"""
        import sqlite3
        import json
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT chain_id, current_step, error_history, retry_count
            FROM dialog_sessions 
            WHERE state = 'error' OR json_array_length(error_history) > 0
        """)
        
        error_data = cursor.fetchall()
        conn.close()
        
        error_analysis = {
            "total_errors": len(error_data),
            "errors_by_chain": {},
            "errors_by_step": {},
            "common_errors": {}
        }
        
        for row in error_data:
            chain_id, step_id, error_history_json, retry_count = row
            
            # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–ø–æ—á–∫–∞–º
            if chain_id not in error_analysis["errors_by_chain"]:
                error_analysis["errors_by_chain"][chain_id] = 0
            error_analysis["errors_by_chain"][chain_id] += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –ø–æ —à–∞–≥–∞–º
            if step_id not in error_analysis["errors_by_step"]:
                error_analysis["errors_by_step"][step_id] = 0
            error_analysis["errors_by_step"][step_id] += 1
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            try:
                error_history = json.loads(error_history_json) if error_history_json else []
                for error in error_history:
                    error_type = error.split(":")[1].strip() if ":" in error else error
                    if error_type not in error_analysis["common_errors"]:
                        error_analysis["common_errors"][error_type] = 0
                    error_analysis["common_errors"][error_type] += 1
            except:
                pass
        
        return error_analysis


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
dialog_handler_instance: Optional[DialogHandler] = None


def init_dialog_system(db_path: str) -> DialogHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –¥–∏–∞–ª–æ–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
    global dialog_handler_instance
    dialog_handler_instance = DialogHandler(db_path)
    logger.info("–î–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return dialog_handler_instance


def get_dialog_system() -> DialogHandler:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    global dialog_handler_instance
    if dialog_handler_instance is None:
        raise RuntimeError("–î–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return dialog_handler_instance