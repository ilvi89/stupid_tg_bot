#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ DSL –±–æ—Ç–∞
"""

import logging
import os
import asyncio
from typing import Dict, Any, Optional

from dialog_dsl import init_dialog_engine
from scenarios.registry import get_registry
from scenarios.loader import get_loader
from scenarios.executor import init_scenario_system
from scenarios.compositions import init_composition_manager
from scenarios.auto_register import ScenarioDiscovery
from interfaces import get_user_interface, get_manager_interface, get_composition_interface, get_system_interface


logger = logging.getLogger(__name__)


class DSLBootstrap:
    """–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DSL –±–æ—Ç–∞"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.dialog_engine = None
        self.scenario_executor = None
        self.scenario_integrator = None
        self.scenario_orchestrator = None
        self.composition_manager = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.init_stats = {
            "scenarios_loaded": 0,
            "compositions_loaded": 0,
            "errors": [],
            "warnings": []
        }
    
    async def initialize(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DSL —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DSL —Å–∏—Å—Ç–µ–º—ã...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            await self._init_dialog_engine()
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            await self._init_scenario_system()
            
            # 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            await self._discover_and_register_scenarios()
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
            await self._init_compositions()
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            await self._init_interfaces()
            
            # 6. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
            await self._validate_system()
            
            logger.info("DSL —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return {
                "success": True,
                "stats": self.init_stats
            }
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "error": str(e),
                "stats": self.init_stats
            }
    
    async def _init_dialog_engine(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
        self.dialog_engine = init_dialog_engine(self.db_path)
        logger.info("‚úÖ –î–≤–∏–∂–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _init_scenario_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        self.scenario_executor, self.scenario_integrator, self.scenario_orchestrator = init_scenario_system(
            self.dialog_engine
        )
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def _discover_and_register_scenarios(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
            stats = ScenarioDiscovery.discover_and_register_all()
            
            if "error" in stats:
                self.init_stats["errors"].append(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {stats['error']}")
            else:
                self.init_stats["scenarios_loaded"] = stats.get("total_scenarios", 0)
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {self.init_stats['scenarios_loaded']} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            loader = get_loader()
            scenarios_dir = os.path.join(os.path.dirname(__file__), "scenarios")
            load_result = loader.load_from_directory(scenarios_dir)
            
            if load_result["errors"] > 0:
                for error in load_result["error_details"]:
                    self.init_stats["warnings"].append(error)
            
            self.init_stats["scenarios_loaded"] += load_result["loaded"]
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}"
            self.init_stats["errors"].append(error_msg)
            logger.error(error_msg)
    
    async def _init_compositions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–π"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–π...")
        
        try:
            self.composition_manager = init_composition_manager(self.scenario_orchestrator)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            from scenarios.compositions_demo import register_all_compositions
            if register_all_compositions():
                self.init_stats["compositions_loaded"] = len(self.composition_manager.registry.compositions)
                logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {self.init_stats['compositions_loaded']} –∫–æ–º–ø–æ–∑–∏—Ü–∏–π")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π: {e}"
            self.init_stats["errors"].append(error_msg)
            logger.error(error_msg)
    
    async def _init_interfaces(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
            get_user_interface()
            get_manager_interface()
            get_composition_interface()
            get_system_interface()
            
            logger.info("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}"
            self.init_stats["errors"].append(error_msg)
            logger.error(error_msg)
    
    async def _validate_system(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
            registry = get_registry()
            validation_errors = get_loader().validate_all_scenarios()
            
            if validation_errors:
                for scenario_id, errors in validation_errors.items():
                    for error in errors:
                        warning_msg = f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_id}': {error}"
                        self.init_stats["warnings"].append(warning_msg)
                        logger.warning(warning_msg)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            missing_deps = registry.validate_dependencies()
            if missing_deps:
                for scenario_id, deps in missing_deps.items():
                    warning_msg = f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_id}' –∏–º–µ–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {deps}"
                    self.init_stats["warnings"].append(warning_msg)
                    logger.warning(warning_msg)
            
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
            self.init_stats["errors"].append(error_msg)
            logger.error(error_msg)
    
    def get_initialization_report(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        report = "üöÄ <b>–û—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DSL —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        if self.init_stats["scenarios_loaded"] > 0:
            report += f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {self.init_stats['scenarios_loaded']}\n"
        
        if self.init_stats["compositions_loaded"] > 0:
            report += f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π: {self.init_stats['compositions_loaded']}\n"
        
        if self.init_stats["warnings"]:
            report += f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.init_stats['warnings'])}):\n"
            for warning in self.init_stats["warnings"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                report += f"‚Ä¢ {warning}\n"
            
            if len(self.init_stats["warnings"]) > 5:
                report += f"‚Ä¢ ... –∏ –µ—â–µ {len(self.init_stats['warnings']) - 5}\n"
        
        if self.init_stats["errors"]:
            report += f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.init_stats['errors'])}):\n"
            for error in self.init_stats["errors"]:
                report += f"‚Ä¢ {error}\n"
        
        if not self.init_stats["errors"]:
            report += "\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
        
        return report


class DSLLauncher:
    """–ó–∞–ø—É—Å–∫–∞–ª—å—â–∏–∫ DSL –±–æ—Ç–∞"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.bootstrap = DSLBootstrap(db_path)
        self.application = None
    
    async def launch(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å DSL –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DSL —Å–∏—Å—Ç–µ–º—ã...")
            init_result = await self.bootstrap.initialize()
            
            if not init_result["success"]:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_result['error']}")
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
            report = self.bootstrap.get_initialization_report()
            print(report.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>", ""))
            
            # –°–æ–∑–¥–∞–µ–º Telegram Application
            print("\nüì± –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            from bot import DSLTelegramBot
            
            bot = DSLTelegramBot()
            self.application = bot.create_application()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            print("\nü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º DSL –±–æ—Ç–∞...")
            print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            await self.application.run_polling()
            
            return True
            
        except KeyboardInterrupt:
            print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
            
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def get_launch_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ"""
        return {
            "bootstrap_stats": self.bootstrap.init_stats,
            "application_ready": self.application is not None
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_global_launcher: Optional[DSLLauncher] = None


def get_launcher(db_path: str = None) -> DSLLauncher:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞–ª—å—â–∏–∫"""
    global _global_launcher
    if _global_launcher is None:
        if db_path is None:
            db_path = os.getenv('DATABASE_PATH', 'english_club.db')
        _global_launcher = DSLLauncher(db_path)
    return _global_launcher


async def quick_launch():
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ DSL –±–æ—Ç–∞"""
    db_path = os.getenv('DATABASE_PATH', 'english_club.db')
    launcher = get_launcher(db_path)
    return await launcher.launch()