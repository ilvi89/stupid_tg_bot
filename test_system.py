#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DSL —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞
"""

import os
import sys
from pathlib import Path


def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        'bot.py': '–û—Å–Ω–æ–≤–Ω–æ–π DSL –±–æ—Ç',
        'run.py': '–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
        'start.py': '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫',
        'bootstrap.py': '–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
        'interfaces.py': 'DSL –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã',
        'dialog_dsl.py': '–Ø–¥—Ä–æ DSL —Å–∏—Å—Ç–µ–º—ã',
        'auth_manager.py': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
        'manage.py': '–£—Ç–∏–ª–∏—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î',
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        '.env.example': '–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        'requirements.txt': '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python',
        'LICENSE': '–õ–∏—Ü–µ–Ω–∑–∏—è',
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        'README.md': '–ì–ª–∞–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        'QUICK_START.md': '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç',
        'DSL_ARCHITECTURE.md': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ DSL',
        'DSL_MIGRATION_GUIDE.md': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–µ—Ä–µ—Ö–æ–¥—É',
        'DSL_IMPLEMENTATION_REPORT.md': '–û—Ç—á–µ—Ç –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ scenarios
        'scenarios/__init__.py': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞',
        'scenarios/registry.py': '–†–µ–µ—Å—Ç—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
        'scenarios/loader.py': '–ó–∞–≥—Ä—É–∑—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
        'scenarios/executor.py': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
        'scenarios/auto_register.py': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'scenarios/compositions.py': '–ö–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        'scenarios/user/__init__.py': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
        'scenarios/user/registration.py': '–°—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        'scenarios/user/profile.py': '–°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
        'scenarios/user/support.py': '–°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        'scenarios/manager/__init__.py': '–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
        'scenarios/manager/auth.py': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
        'scenarios/manager/broadcast.py': '–°—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏',
        'scenarios/manager/administration.py': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
        
        # –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        'scenarios/common/__init__.py': '–û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
        'scenarios/common/actions.py': '–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        'scenarios/common/validators.py': '–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
    }
    
    missing_files = []
    for file_path, description in required_files.items():
        if not Path(file_path).exists():
            missing_files.append(f"{file_path} ({description})")
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"  ‚Ä¢ {file}")
        return False
    
    print(f"‚úÖ –í—Å–µ {len(required_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
    return True


def test_python_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")
    
    python_files = []
    for file_path in Path('.').rglob('*.py'):
        if '__pycache__' not in str(file_path):
            python_files.append(str(file_path))
    
    errors = []
    for file_path in python_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                compile(f.read(), file_path, 'exec')
        except SyntaxError as e:
            errors.append(f"{file_path}: {e}")
        except Exception as e:
            errors.append(f"{file_path}: {e}")
    
    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
        for error in errors:
            print(f"  ‚Ä¢ {error}")
        return False
    
    print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å {len(python_files)} —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True


def test_env_example():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–∞ .env.example"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.example...")
    
    if not Path('.env.example').exists():
        print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    required_vars = [
        'BOT_TOKEN',
        'MANAGER_PASSWORD', 
        'DATABASE_PATH',
        'LOG_LEVEL',
        'DSL_AUTO_RELOAD'
    ]
    
    with open('.env.example', 'r') as f:
        content = f.read()
    
    missing_vars = []
    for var in required_vars:
        if var not in content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env.example: {missing_vars}")
        return False
    
    print("‚úÖ –§–∞–π–ª .env.example —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    return True


def test_documentation():
    """–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    docs = {
        'README.md': ['DSL', '—Å—Ü–µ–Ω–∞—Ä–∏–∏', '–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏'],
        'QUICK_START.md': ['run.py', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã'],
        'DSL_ARCHITECTURE.md': ['–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'scenarios'],
    }
    
    errors = []
    for doc_file, keywords in docs.items():
        if not Path(doc_file).exists():
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {doc_file}")
            continue
        
        with open(doc_file, 'r', encoding='utf-8') as f:
            content = f.read().lower()
        
        missing_keywords = []
        for keyword in keywords:
            if keyword.lower() not in content:
                missing_keywords.append(keyword)
        
        if missing_keywords:
            errors.append(f"{doc_file}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {missing_keywords}")
    
    if errors:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π:")
        for error in errors:
            print(f"  ‚Ä¢ {error}")
        return False
    
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è {len(docs)} —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def test_scenarios_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenario_files = [
        'scenarios/user/registration.py',
        'scenarios/manager/auth.py'
    ]
    
    for file_path in scenario_files:
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if '@user_scenario' not in content and '@manager_scenario' not in content:
            print(f"‚ùå –í —Ñ–∞–π–ª–µ {file_path} –Ω–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
            return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def show_final_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print("\n" + "="*60)
    print("üéâ DSL –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
    print("="*60)
    
    print("\nüìã –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞:")
    print("  python run.py              # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫")
    print("  python run.py --check      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("  python start.py            # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
    
    print("\nüé≠ DSL –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ:")
    print("  /start                     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    print("  /manager                   # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("  /onboarding               # –ü–æ–ª–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
    print("  /dashboard                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    print("  /scenario_list            # –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("  README.md                 # –ì–ª–∞–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
    print("  QUICK_START.md            # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    print("  DSL_ARCHITECTURE.md       # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞:")
    print("  .env.example              # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("  cp .env.example .env      # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    print("  # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å BOT_TOKEN –≤ .env")
    
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞: python run.py")
    print("="*60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DSL –°–ò–°–¢–ï–ú–´")
    print("="*50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python", test_python_syntax),
        ("–§–∞–π–ª .env.example", test_env_example),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_documentation),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", test_scenarios_structure)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(tests)}")
    
    if failed == 0:
        show_final_info()
        return True
    else:
        print(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {failed} —Ç–µ—Å—Ç–∞—Ö")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)