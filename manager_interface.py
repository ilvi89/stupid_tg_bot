#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

import sqlite3
import csv
import os
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from dialog_config import MANAGER_TEXTS, BUTTONS, SETTINGS
from auth_manager import auth_manager

class ManagerInterface:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.broadcast_sessions = {}  # user_id -> broadcast_data
    
    async def request_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        user_id = update.effective_user.id
        
        if auth_manager.is_authorized(user_id):
            await self.show_manager_menu(update, context)
            return
        
        await update.message.reply_text(
            MANAGER_TEXTS['auth']['request_password'],
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
        context.user_data['awaiting_manager_password'] = True
    
    async def handle_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        if not context.user_data.get('awaiting_manager_password'):
            return False
        
        user_id = update.effective_user.id
        password = update.message.text.strip()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await update.message.delete()
        except:
            pass
        
        if auth_manager.authenticate(user_id, password):
            await update.message.reply_text(
                MANAGER_TEXTS['auth']['access_granted'],
                parse_mode='HTML'
            )
            context.user_data['awaiting_manager_password'] = False
            await self.show_manager_menu(update, context)
            return True
        else:
            await update.message.reply_text(
                MANAGER_TEXTS['auth']['invalid_password'],
                parse_mode='HTML'
            )
            context.user_data['awaiting_manager_password'] = False
            return False
    
    async def check_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π"""
        user_id = update.effective_user.id
        
        if not auth_manager.is_authorized(user_id):
            if update.callback_query:
                await update.callback_query.answer(
                    MANAGER_TEXTS['auth']['not_authorized'], 
                    show_alert=True
                )
            else:
                await update.message.reply_text(
                    MANAGER_TEXTS['auth']['not_authorized'],
                    parse_mode='HTML'
                )
            return False
        return True
    
    async def show_manager_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if not await self.check_auth(update, context):
            return
        
        user_id = update.effective_user.id
        session_info = auth_manager.get_session_info(user_id)
        time_left = auth_manager.get_session_time_left(user_id)
        
        keyboard = [
            [InlineKeyboardButton(BUTTONS['manager_menu']['stats'], callback_data="mgr_stats")],
            [InlineKeyboardButton(BUTTONS['manager_menu']['users'], callback_data="mgr_users"),
             InlineKeyboardButton(BUTTONS['manager_menu']['export'], callback_data="mgr_export")],
            [InlineKeyboardButton(BUTTONS['manager_menu']['broadcast'], callback_data="mgr_broadcast")],
            [InlineKeyboardButton(BUTTONS['manager_menu']['settings'], callback_data="mgr_settings"),
             InlineKeyboardButton(BUTTONS['manager_menu']['clear'], callback_data="mgr_clear")],
            [InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="mgr_logout")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        menu_text = (
            f"{MANAGER_TEXTS['menu']['title']}\n\n"
            f"{MANAGER_TEXTS['menu']['description']}\n\n"
            f"‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {time_left // 60} –º–∏–Ω {time_left % 60} —Å–µ–∫\n"
            f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {auth_manager.get_active_sessions_count()}"
        )
        
        if update.message:
            await update.message.reply_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(menu_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_detailed_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        stats = self._get_detailed_stats()
        
        stats_text = (
            f"{MANAGER_TEXTS['stats']['detailed_title']}\n\n"
            f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total']}\n"
            f"üìß –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {stats['newsletter']}\n"
            f"üìö –° –æ–ø—ã—Ç–æ–º –∏–∑—É—á–µ–Ω–∏—è: {stats['experienced']}\n"
            f"üÜï –ù–æ–≤–∏—á–∫–∏: {stats['beginners']}\n"
            f"üìÖ –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['week_new']}\n"
            f"üìÖ –ù–æ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü: {stats['month_new']}\n"
            f"üéÇ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {stats['avg_age']:.1f} –ª–µ—Ç\n\n"
            f"üìä <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
        )
        
        for age_group, count in stats['age_groups'].items():
            stats_text += f"‚Ä¢ {age_group}: {count} —á–µ–ª.\n"
        
        stats_text += f"\nüìà <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):</b>\n"
        for date, count in stats['daily_registrations'].items():
            stats_text += f"‚Ä¢ {date}: {count} —á–µ–ª.\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="mgr_export_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mgr_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mgr_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(stats_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        users_per_page = SETTINGS['pagination']['users_per_page']
        offset = (page - 1) * users_per_page
        
        users, total_count = self._get_users_page(offset, users_per_page)
        
        if not users:
            await query.edit_message_text(
                MANAGER_TEXTS['users']['no_users'],
                parse_mode='HTML'
            )
            return
        
        users_text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä. {page})</b>\n\n"
        users_text += f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(users)} –∏–∑ {total_count}\n\n"
        
        for user in users:
            newsletter_status = "‚úÖ" if user['newsletter_consent'] else "‚ùå"
            users_text += (
                f"üë§ <b>{user['name']}</b> ({user['age']} –ª–µ—Ç)\n"
                f"   üìö –û–ø—ã—Ç: {user['english_experience']}\n"
                f"   üìß –†–∞—Å—Å—ã–ª–∫–∞: {newsletter_status}\n"
                f"   üìÖ {user['registration_date']}\n"
                f"   üÜî ID: {user['telegram_id']}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = []
        nav_buttons = []
        
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"mgr_users_page_{page-1}"))
        
        total_pages = (total_count + users_per_page - 1) // users_per_page
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"mgr_users_page_{page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.extend([
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="mgr_search_user")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="mgr_user_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mgr_menu")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(users_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def export_users_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer("–ì–æ—Ç–æ–≤–ª—é —ç–∫—Å–ø–æ—Ä—Ç...")
        
        users = self._get_all_users()
        
        if not users:
            await query.edit_message_text(
                MANAGER_TEXTS['export']['no_data'],
                parse_mode='HTML'
            )
            return
        
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([
                'Telegram ID', 'Username', '–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–û–ø—ã—Ç –∏–∑—É—á–µ–Ω–∏—è',
                '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ', '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
            ])
            
            for user in users:
                writer.writerow([
                    user['telegram_id'], user['username'], user['name'],
                    user['age'], user['english_experience'],
                    '–î–∞' if user['data_consent'] else '–ù–µ—Ç',
                    '–î–∞' if user['newsletter_consent'] else '–ù–µ—Ç',
                    user['registration_date']
                ])
        
        success_text = MANAGER_TEXTS['export']['success'].format(
            filename=filename, count=len(users)
        )
        
        await query.edit_message_text(success_text, parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            await query.message.reply_document(
                document=open(filename, 'rb'),
                caption=MANAGER_TEXTS['export']['caption'].format(count=len(users))
            )
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(filename)
            except:
                pass
    
    async def start_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        await query.edit_message_text(
            MANAGER_TEXTS['broadcast']['request_message'],
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data['awaiting_broadcast_message'] = True
    
    async def handle_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not context.user_data.get('awaiting_broadcast_message'):
            return False
        
        if not await self.check_auth(update, context):
            return True
        
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if len(message_text) > SETTINGS['text_limits']['max_message_length']:
            await update.message.reply_text(
                f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {SETTINGS['text_limits']['max_message_length']} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients_count = self._get_newsletter_subscribers_count()
        
        confirm_text = MANAGER_TEXTS['broadcast']['confirm_template'].format(
            message=message_text,
            count=recipients_count
        )
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mgr_broadcast_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mgr_broadcast_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.broadcast_sessions[user_id] = {
            'message': message_text,
            'recipients_count': recipients_count
        }
        
        context.user_data['awaiting_broadcast_message'] = False
        
        await update.message.reply_text(confirm_text, parse_mode='HTML', reply_markup=reply_markup)
        return True
    
    async def confirm_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if user_id not in self.broadcast_sessions:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        broadcast_data = self.broadcast_sessions[user_id]
        message_text = broadcast_data['message']
        
        await query.edit_message_text(MANAGER_TEXTS['broadcast']['sending'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = self._get_newsletter_subscribers()
        
        sent_count = 0
        failed_count = 0
        
        for recipient in recipients:
            try:
                await context.bot.send_message(
                    chat_id=recipient['telegram_id'],
                    text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–ª—É–±–∞:</b>\n\n{message_text}",
                    parse_mode='HTML'
                )
                sent_count += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                await asyncio.sleep(0.1)
                
            except TelegramError as e:
                failed_count += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient['telegram_id']}: {e}")
        
        success_text = MANAGER_TEXTS['broadcast']['success'].format(
            sent=sent_count, total=len(recipients)
        )
        
        if failed_count > 0:
            success_text += f"\n‚ö†Ô∏è –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
        
        await query.edit_message_text(success_text, parse_mode='HTML')
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
        del self.broadcast_sessions[user_id]
    
    async def cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if user_id in self.broadcast_sessions:
            del self.broadcast_sessions[user_id]
        
        await query.edit_message_text(MANAGER_TEXTS['broadcast']['cancelled'])
    
    async def show_bot_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}\n"
            f"‚Ä¢ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: {auth_manager.session_timeout // 60} –º–∏–Ω\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {SETTINGS['pagination']['users_per_page']}\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏: {SETTINGS['text_limits']['max_name_length']}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç—ã –≤–æ–∑—Ä–∞—Å—Ç–∞: {SETTINGS['age_limits']['min']}-{SETTINGS['age_limits']['max']}\n\n"
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {self._get_db_size():.2f} MB\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {auth_manager.get_active_sessions_count()}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {self._get_uptime()}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="mgr_reload_config")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏", callback_data="mgr_cleanup_sessions")],
            [InlineKeyboardButton("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="mgr_system_info")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mgr_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(settings_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def logout(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        auth_manager.logout(user_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()
        
        await query.edit_message_text(
            "üëã <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manager",
            parse_mode='HTML'
        )
    
    def _get_detailed_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM users")
        total = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE newsletter_consent = 1")
        newsletter = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE english_experience = '–î–∞'")
        experienced = cursor.fetchone()[0]
        
        cursor.execute("SELECT AVG(age) FROM users WHERE age IS NOT NULL")
        avg_age = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE registration_date >= date('now', '-7 days')")
        week_new = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE registration_date >= date('now', '-30 days')")
        month_new = cursor.fetchone()[0]
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        age_groups = {}
        cursor.execute("""
            SELECT 
                CASE 
                    WHEN age < 18 THEN '–î–æ 18'
                    WHEN age < 25 THEN '18-24'
                    WHEN age < 35 THEN '25-34'
                    WHEN age < 45 THEN '35-44'
                    WHEN age < 55 THEN '45-54'
                    ELSE '55+'
                END as age_group,
                COUNT(*) as count
            FROM users 
            WHERE age IS NOT NULL
            GROUP BY age_group
        """)
        
        for row in cursor.fetchall():
            age_groups[row[0]] = row[1]
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
        daily_registrations = {}
        cursor.execute("""
            SELECT DATE(registration_date) as reg_date, COUNT(*) as count
            FROM users 
            WHERE registration_date >= date('now', '-7 days')
            GROUP BY DATE(registration_date)
            ORDER BY reg_date DESC
        """)
        
        for row in cursor.fetchall():
            daily_registrations[row[0]] = row[1]
        
        conn.close()
        
        return {
            'total': total,
            'newsletter': newsletter,
            'experienced': experienced,
            'beginners': total - experienced,
            'avg_age': avg_age,
            'week_new': week_new,
            'month_new': month_new,
            'age_groups': age_groups,
            'daily_registrations': daily_registrations
        }
    
    def _get_users_page(self, offset: int, limit: int) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor.execute('''
            SELECT telegram_id, username, name, age, english_experience, 
                   newsletter_consent, registration_date
            FROM users 
            ORDER BY registration_date DESC 
            LIMIT ? OFFSET ?
        ''', (limit, offset))
        
        users = []
        for row in cursor.fetchall():
            users.append({
                'telegram_id': row[0],
                'username': row[1],
                'name': row[2],
                'age': row[3],
                'english_experience': row[4],
                'newsletter_consent': bool(row[5]),
                'registration_date': row[6]
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) FROM users")
        total_count = cursor.fetchone()[0]
        
        conn.close()
        return users, total_count
    
    def _get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT telegram_id, username, name, age, english_experience, 
                   data_consent, newsletter_consent, registration_date
            FROM users ORDER BY registration_date DESC
        ''')
        
        users = []
        for row in cursor.fetchall():
            users.append({
                'telegram_id': row[0],
                'username': row[1] or '',
                'name': row[2],
                'age': row[3],
                'english_experience': row[4],
                'data_consent': bool(row[5]),
                'newsletter_consent': bool(row[6]),
                'registration_date': row[7]
            })
        
        conn.close()
        return users
    
    def _get_newsletter_subscribers(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT telegram_id, name FROM users 
            WHERE newsletter_consent = 1
        ''')
        
        subscribers = []
        for row in cursor.fetchall():
            subscribers.append({
                'telegram_id': row[0],
                'name': row[1]
            })
        
        conn.close()
        return subscribers
    
    def _get_newsletter_subscribers_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users WHERE newsletter_consent = 1")
        count = cursor.fetchone()[0]
        conn.close()
        return count
    
    def _get_db_size(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ MB"""
        try:
            size_bytes = os.path.getsize(self.db_path)
            return size_bytes / (1024 * 1024)
        except:
            return 0.0
    
    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    async def clear_database_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É –ë–î"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="mgr_clear_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mgr_clear_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def clear_database_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
        if not await self.check_auth(update, context):
            return
        
        query = update.callback_query
        await query.answer()
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users")
        conn.commit()
        conn.close()
        
        await query.edit_message_text(
            "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã.",
            parse_mode='HTML'
        )
    
    async def clear_database_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_manager_menu(update, context)